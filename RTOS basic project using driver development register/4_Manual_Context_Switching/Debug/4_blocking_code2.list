
4_blocking_code2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000149c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800163c  0800163c  0001163c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001734  08001734  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001734  08001734  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001734  08001734  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001734  08001734  00011734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001738  08001738  00011738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800173c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000068  080017a4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  080017a4  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000038a2  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000af4  00000000  00000000  0002393a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00024430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  00024620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000100f2  00000000  00000000  000247a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000282f  00000000  00000000  0003489a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055439  00000000  00000000  000370c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008c502  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000da8  00000000  00000000  0008c558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001624 	.word	0x08001624

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08001624 	.word	0x08001624

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <led_init>:

#define GPIOAEN			(1U<<0)//  0b 0000 0000 0000 0000 0000 0000 0000 0001
#define LED_PIN			(1U<<5)

void led_init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	//Example of 'friendly' programming
	// Initial state =    0b 0000 0000 0000 0000 1100 0000 0000 0000
	//Set bit0 = (1u<<0)= 0b 0000 0000 0000 0000 0000 0000 0000 0001
	//final state =  Initial state OR Set bit0  =  0b 0000 0000 0000 0000 1100 0000 0000 0001

	RCC->AHB1ENR  |= GPIOAEN;
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <led_init+0x34>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <led_init+0x34>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30




	/*Set led pin as output pin*/
	GPIOA->MODER |=(1U<<10);
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <led_init+0x38>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a08      	ldr	r2, [pc, #32]	; (80002b8 <led_init+0x38>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <led_init+0x38>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <led_init+0x38>)
 80002a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002a6:	6013      	str	r3, [r2, #0]

}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020000 	.word	0x40020000

080002bc <motor_main>:
void valve_open(void);
void valve_close(void);


int motor_main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	while(1)
	{
		motor_run();
 80002c0:	f000 f82a 	bl	8000318 <motor_run>
		delay(1);
 80002c4:	2001      	movs	r0, #1
 80002c6:	f000 f8f3 	bl	80004b0 <delay>
		motor_stop();
 80002ca:	f000 f82f 	bl	800032c <motor_stop>
		delay(1);
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f8ee 	bl	80004b0 <delay>
		motor_run();
 80002d4:	e7f4      	b.n	80002c0 <motor_main+0x4>

080002d6 <valve_main>:
	}
}

int valve_main(void)
{
 80002d6:	b580      	push	{r7, lr}
 80002d8:	af00      	add	r7, sp, #0
	while(1)
	{
		valve_open();
 80002da:	f000 f831 	bl	8000340 <valve_open>
		delay(1);
 80002de:	2001      	movs	r0, #1
 80002e0:	f000 f8e6 	bl	80004b0 <delay>
		valve_close();
 80002e4:	f000 f836 	bl	8000354 <valve_close>
		delay(1);
 80002e8:	2001      	movs	r0, #1
 80002ea:	f000 f8e1 	bl	80004b0 <delay>
		valve_open();
 80002ee:	e7f4      	b.n	80002da <valve_main+0x4>

080002f0 <main>:
	}
}
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
	uint32_t volatile start  = 1U;
 80002f6:	2301      	movs	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
	led_init();
 80002fa:	f7ff ffc1 	bl	8000280 <led_init>
	uart_tx_init();
 80002fe:	f000 f955 	bl	80005ac <uart_tx_init>
	timebase_init();
 8000302:	f000 f91f 	bl	8000544 <timebase_init>


	if(start)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d002      	beq.n	8000312 <main+0x22>
	{
		motor_main();
 800030c:	f7ff ffd6 	bl	80002bc <motor_main>
 8000310:	e001      	b.n	8000316 <main+0x26>

	}
	else{
		valve_main();
 8000312:	f7ff ffe0 	bl	80002d6 <valve_main>
	}

	while(1)
 8000316:	e7fe      	b.n	8000316 <main+0x26>

08000318 <motor_run>:
	}
}


void motor_run(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	printf("Motor is starting...\n\r");
 800031c:	4802      	ldr	r0, [pc, #8]	; (8000328 <motor_run+0x10>)
 800031e:	f000 fa2b 	bl	8000778 <iprintf>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	0800163c 	.word	0x0800163c

0800032c <motor_stop>:


void motor_stop(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	printf("Motor is stopping...\n\r");
 8000330:	4802      	ldr	r0, [pc, #8]	; (800033c <motor_stop+0x10>)
 8000332:	f000 fa21 	bl	8000778 <iprintf>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	08001654 	.word	0x08001654

08000340 <valve_open>:

void valve_open(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	printf("Valve is opening...\n\r");
 8000344:	4802      	ldr	r0, [pc, #8]	; (8000350 <valve_open+0x10>)
 8000346:	f000 fa17 	bl	8000778 <iprintf>
}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	0800166c 	.word	0x0800166c

08000354 <valve_close>:


void valve_close(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	printf("Valve is closing...\n\r");
 8000358:	4802      	ldr	r0, [pc, #8]	; (8000364 <valve_close+0x10>)
 800035a:	f000 fa0d 	bl	8000778 <iprintf>
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	08001684 	.word	0x08001684

08000368 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
 8000378:	e00a      	b.n	8000390 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800037a:	f3af 8000 	nop.w
 800037e:	4601      	mov	r1, r0
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	1c5a      	adds	r2, r3, #1
 8000384:	60ba      	str	r2, [r7, #8]
 8000386:	b2ca      	uxtb	r2, r1
 8000388:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	3301      	adds	r3, #1
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	697a      	ldr	r2, [r7, #20]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	429a      	cmp	r2, r3
 8000396:	dbf0      	blt.n	800037a <_read+0x12>
	}

return len;
 8000398:	687b      	ldr	r3, [r7, #4]
}
 800039a:	4618      	mov	r0, r3
 800039c:	3718      	adds	r7, #24
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}

080003a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003a2:	b580      	push	{r7, lr}
 80003a4:	b086      	sub	sp, #24
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	60f8      	str	r0, [r7, #12]
 80003aa:	60b9      	str	r1, [r7, #8]
 80003ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	e009      	b.n	80003c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	1c5a      	adds	r2, r3, #1
 80003b8:	60ba      	str	r2, [r7, #8]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 f8e9 	bl	8000594 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	3301      	adds	r3, #1
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	697a      	ldr	r2, [r7, #20]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	dbf1      	blt.n	80003b4 <_write+0x12>
	}
	return len;
 80003d0:	687b      	ldr	r3, [r7, #4]
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	3718      	adds	r7, #24
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <_close>:

int _close(int file)
{
 80003da:	b480      	push	{r7}
 80003dc:	b083      	sub	sp, #12
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
	return -1;
 80003e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003f2:	b480      	push	{r7}
 80003f4:	b083      	sub	sp, #12
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	6078      	str	r0, [r7, #4]
 80003fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000402:	605a      	str	r2, [r3, #4]
	return 0;
 8000404:	2300      	movs	r3, #0
}
 8000406:	4618      	mov	r0, r3
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr

08000412 <_isatty>:

int _isatty(int file)
{
 8000412:	b480      	push	{r7}
 8000414:	b083      	sub	sp, #12
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
	return 1;
 800041a:	2301      	movs	r3, #1
}
 800041c:	4618      	mov	r0, r3
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
	return 0;
 8000434:	2300      	movs	r3, #0
}
 8000436:	4618      	mov	r0, r3
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
	...

08000444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800044c:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <_sbrk+0x5c>)
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <_sbrk+0x60>)
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000458:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d102      	bne.n	8000466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <_sbrk+0x64>)
 8000462:	4a12      	ldr	r2, [pc, #72]	; (80004ac <_sbrk+0x68>)
 8000464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <_sbrk+0x64>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4413      	add	r3, r2
 800046e:	693a      	ldr	r2, [r7, #16]
 8000470:	429a      	cmp	r2, r3
 8000472:	d207      	bcs.n	8000484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000474:	f000 f94e 	bl	8000714 <__errno>
 8000478:	4603      	mov	r3, r0
 800047a:	220c      	movs	r2, #12
 800047c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800047e:	f04f 33ff 	mov.w	r3, #4294967295
 8000482:	e009      	b.n	8000498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <_sbrk+0x64>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <_sbrk+0x64>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	4a05      	ldr	r2, [pc, #20]	; (80004a8 <_sbrk+0x64>)
 8000494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3718      	adds	r7, #24
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20020000 	.word	0x20020000
 80004a4:	00000400 	.word	0x00000400
 80004a8:	20000084 	.word	0x20000084
 80004ac:	200000a8 	.word	0x200000a8

080004b0 <delay>:
volatile uint32_t tick_freq = 1;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 80004b8:	f000 f82e 	bl	8000518 <get_tick>
 80004bc:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004c8:	d004      	beq.n	80004d4 <delay+0x24>
	{
		wait += (uint32_t)(tick_freq);
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <delay+0x40>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	4413      	add	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
	}

	while((get_tick() - tickstart) < wait){}
 80004d4:	bf00      	nop
 80004d6:	f000 f81f 	bl	8000518 <get_tick>
 80004da:	4602      	mov	r2, r0
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d8f7      	bhi.n	80004d6 <delay+0x26>

}
 80004e6:	bf00      	nop
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000000 	.word	0x20000000

080004f4 <tick_increment>:

void tick_increment(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
	g_curr_tick += tick_freq;
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <tick_increment+0x1c>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <tick_increment+0x20>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4413      	add	r3, r2
 8000502:	4a04      	ldr	r2, [pc, #16]	; (8000514 <tick_increment+0x20>)
 8000504:	6013      	str	r3, [r2, #0]
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	20000000 	.word	0x20000000
 8000514:	20000094 	.word	0x20000094

08000518 <get_tick>:

uint32_t get_tick(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <get_tick+0x24>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <get_tick+0x28>)
 8000526:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000528:	b662      	cpsie	i
}
 800052a:	bf00      	nop
	__enable_irq();


	return g_curr_tick_p;
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <get_tick+0x28>)
 800052e:	681b      	ldr	r3, [r3, #0]
}
 8000530:	4618      	mov	r0, r3
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000094 	.word	0x20000094
 8000540:	20000090 	.word	0x20000090

08000544 <timebase_init>:

void timebase_init(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
	/*Reload the timer with number of cycles per second*/
	SysTick->LOAD =  ONE_SEC_LOAD - 1;
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <timebase_init+0x3c>)
 800054a:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <timebase_init+0x40>)
 800054c:	605a      	str	r2, [r3, #4]

	/*Clear Systick current value register*/
	SysTick->VAL  = 0;
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <timebase_init+0x3c>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]

	/*Select internal clock source*/
	SysTick->CTRL  = CTRL_CLCKSRC;
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <timebase_init+0x3c>)
 8000556:	2204      	movs	r2, #4
 8000558:	601a      	str	r2, [r3, #0]

	/*Enable interrupt*/
	SysTick->CTRL  |= CTRL_TICKINT;
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <timebase_init+0x3c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <timebase_init+0x3c>)
 8000560:	f043 0302 	orr.w	r3, r3, #2
 8000564:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL  |= CTRL_ENABLE;
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <timebase_init+0x3c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a05      	ldr	r2, [pc, #20]	; (8000580 <timebase_init+0x3c>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000572:	b662      	cpsie	i
}
 8000574:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	e000e010 	.word	0xe000e010
 8000584:	00f423ff 	.word	0x00f423ff

08000588 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	tick_increment();
 800058c:	f7ff ffb2 	bl	80004f4 <tick_increment>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}

08000594 <__io_putchar>:
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);


int __io_putchar(int ch)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 f84f 	bl	8000640 <uart_write>
	return ch;
 80005a2:	687b      	ldr	r3, [r7, #4]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <uart_tx_init>:

void uart_tx_init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	 RCC->AHB1ENR  |= GPIOAEN;
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <uart_tx_init+0x84>)
 80005b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b4:	4a1e      	ldr	r2, [pc, #120]	; (8000630 <uart_tx_init+0x84>)
 80005b6:	f043 0301 	orr.w	r3, r3, #1
 80005ba:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	 GPIOA->MODER &=~(1U<<4);
 80005bc:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <uart_tx_init+0x88>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <uart_tx_init+0x88>)
 80005c2:	f023 0310 	bic.w	r3, r3, #16
 80005c6:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |=(1U<<5);
 80005c8:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <uart_tx_init+0x88>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a19      	ldr	r2, [pc, #100]	; (8000634 <uart_tx_init+0x88>)
 80005ce:	f043 0320 	orr.w	r3, r3, #32
 80005d2:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7 (UART2_TX)*/
	 GPIOA->AFR[0] |=(1U<<8);
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <uart_tx_init+0x88>)
 80005d6:	6a1b      	ldr	r3, [r3, #32]
 80005d8:	4a16      	ldr	r2, [pc, #88]	; (8000634 <uart_tx_init+0x88>)
 80005da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005de:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |=(1U<<9);
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <uart_tx_init+0x88>)
 80005e2:	6a1b      	ldr	r3, [r3, #32]
 80005e4:	4a13      	ldr	r2, [pc, #76]	; (8000634 <uart_tx_init+0x88>)
 80005e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ea:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |=(1U<<10);
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <uart_tx_init+0x88>)
 80005ee:	6a1b      	ldr	r3, [r3, #32]
 80005f0:	4a10      	ldr	r2, [pc, #64]	; (8000634 <uart_tx_init+0x88>)
 80005f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005f6:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] &= ~(1U<<11);
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <uart_tx_init+0x88>)
 80005fa:	6a1b      	ldr	r3, [r3, #32]
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <uart_tx_init+0x88>)
 80005fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000602:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART*/
	 RCC->APB1ENR |= UART2EN;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <uart_tx_init+0x84>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a09      	ldr	r2, [pc, #36]	; (8000630 <uart_tx_init+0x84>)
 800060a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	 uart_set_baudrate(APB1_CLK,UART_BAUDRATE);
 8000610:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000614:	4808      	ldr	r0, [pc, #32]	; (8000638 <uart_tx_init+0x8c>)
 8000616:	f000 f82b 	bl	8000670 <uart_set_baudrate>

	/*Configure transfer direction*/
	 USART2->CR1 = CR1_TE;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <uart_tx_init+0x90>)
 800061c:	2208      	movs	r2, #8
 800061e:	60da      	str	r2, [r3, #12]

	/*Enable UART module*/
	 USART2->CR1 |= CR1_UE;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <uart_tx_init+0x90>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	4a05      	ldr	r2, [pc, #20]	; (800063c <uart_tx_init+0x90>)
 8000626:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40020000 	.word	0x40020000
 8000638:	00f42400 	.word	0x00f42400
 800063c:	40004400 	.word	0x40004400

08000640 <uart_write>:

static void uart_write(int ch)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	 while(!(USART2->SR & SR_TXE)){}
 8000648:	bf00      	nop
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <uart_write+0x2c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0f9      	beq.n	800064a <uart_write+0xa>

	/*Write to transmit data register*/
	 USART2->DR =  (ch & 0XFF);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a04      	ldr	r2, [pc, #16]	; (800066c <uart_write+0x2c>)
 800065a:	b2db      	uxtb	r3, r3
 800065c:	6053      	str	r3, [r2, #4]
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40004400 	.word	0x40004400

08000670 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 800067a:	6839      	ldr	r1, [r7, #0]
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 f80b 	bl	8000698 <compute_uart_bd>
 8000682:	4603      	mov	r3, r0
 8000684:	461a      	mov	r2, r3
 8000686:	4b03      	ldr	r3, [pc, #12]	; (8000694 <uart_set_baudrate+0x24>)
 8000688:	609a      	str	r2, [r3, #8]
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40004400 	.word	0x40004400

08000698 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	085a      	lsrs	r2, r3, #1
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	441a      	add	r2, r3
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b0:	b29b      	uxth	r3, r3
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006c2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <LoopForever+0x6>)
  ldr r1, =_edata
 80006ca:	490d      	ldr	r1, [pc, #52]	; (8000700 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006cc:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <LoopForever+0xe>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d0:	e002      	b.n	80006d8 <LoopCopyDataInit>

080006d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d6:	3304      	adds	r3, #4

080006d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006dc:	d3f9      	bcc.n	80006d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e0:	4c0a      	ldr	r4, [pc, #40]	; (800070c <LoopForever+0x16>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e4:	e001      	b.n	80006ea <LoopFillZerobss>

080006e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e8:	3204      	adds	r2, #4

080006ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ec:	d3fb      	bcc.n	80006e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ee:	f000 f817 	bl	8000720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f2:	f7ff fdfd 	bl	80002f0 <main>

080006f6 <LoopForever>:

LoopForever:
    b LoopForever
 80006f6:	e7fe      	b.n	80006f6 <LoopForever>
  ldr   r0, =_estack
 80006f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000700:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000704:	0800173c 	.word	0x0800173c
  ldr r2, =_sbss
 8000708:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800070c:	200000a8 	.word	0x200000a8

08000710 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC_IRQHandler>
	...

08000714 <__errno>:
 8000714:	4b01      	ldr	r3, [pc, #4]	; (800071c <__errno+0x8>)
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20000004 	.word	0x20000004

08000720 <__libc_init_array>:
 8000720:	b570      	push	{r4, r5, r6, lr}
 8000722:	4d0d      	ldr	r5, [pc, #52]	; (8000758 <__libc_init_array+0x38>)
 8000724:	4c0d      	ldr	r4, [pc, #52]	; (800075c <__libc_init_array+0x3c>)
 8000726:	1b64      	subs	r4, r4, r5
 8000728:	10a4      	asrs	r4, r4, #2
 800072a:	2600      	movs	r6, #0
 800072c:	42a6      	cmp	r6, r4
 800072e:	d109      	bne.n	8000744 <__libc_init_array+0x24>
 8000730:	4d0b      	ldr	r5, [pc, #44]	; (8000760 <__libc_init_array+0x40>)
 8000732:	4c0c      	ldr	r4, [pc, #48]	; (8000764 <__libc_init_array+0x44>)
 8000734:	f000 ff76 	bl	8001624 <_init>
 8000738:	1b64      	subs	r4, r4, r5
 800073a:	10a4      	asrs	r4, r4, #2
 800073c:	2600      	movs	r6, #0
 800073e:	42a6      	cmp	r6, r4
 8000740:	d105      	bne.n	800074e <__libc_init_array+0x2e>
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f855 3b04 	ldr.w	r3, [r5], #4
 8000748:	4798      	blx	r3
 800074a:	3601      	adds	r6, #1
 800074c:	e7ee      	b.n	800072c <__libc_init_array+0xc>
 800074e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000752:	4798      	blx	r3
 8000754:	3601      	adds	r6, #1
 8000756:	e7f2      	b.n	800073e <__libc_init_array+0x1e>
 8000758:	08001734 	.word	0x08001734
 800075c:	08001734 	.word	0x08001734
 8000760:	08001734 	.word	0x08001734
 8000764:	08001738 	.word	0x08001738

08000768 <memset>:
 8000768:	4402      	add	r2, r0
 800076a:	4603      	mov	r3, r0
 800076c:	4293      	cmp	r3, r2
 800076e:	d100      	bne.n	8000772 <memset+0xa>
 8000770:	4770      	bx	lr
 8000772:	f803 1b01 	strb.w	r1, [r3], #1
 8000776:	e7f9      	b.n	800076c <memset+0x4>

08000778 <iprintf>:
 8000778:	b40f      	push	{r0, r1, r2, r3}
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <iprintf+0x2c>)
 800077c:	b513      	push	{r0, r1, r4, lr}
 800077e:	681c      	ldr	r4, [r3, #0]
 8000780:	b124      	cbz	r4, 800078c <iprintf+0x14>
 8000782:	69a3      	ldr	r3, [r4, #24]
 8000784:	b913      	cbnz	r3, 800078c <iprintf+0x14>
 8000786:	4620      	mov	r0, r4
 8000788:	f000 f866 	bl	8000858 <__sinit>
 800078c:	ab05      	add	r3, sp, #20
 800078e:	9a04      	ldr	r2, [sp, #16]
 8000790:	68a1      	ldr	r1, [r4, #8]
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	4620      	mov	r0, r4
 8000796:	f000 f983 	bl	8000aa0 <_vfiprintf_r>
 800079a:	b002      	add	sp, #8
 800079c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007a0:	b004      	add	sp, #16
 80007a2:	4770      	bx	lr
 80007a4:	20000004 	.word	0x20000004

080007a8 <std>:
 80007a8:	2300      	movs	r3, #0
 80007aa:	b510      	push	{r4, lr}
 80007ac:	4604      	mov	r4, r0
 80007ae:	e9c0 3300 	strd	r3, r3, [r0]
 80007b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007b6:	6083      	str	r3, [r0, #8]
 80007b8:	8181      	strh	r1, [r0, #12]
 80007ba:	6643      	str	r3, [r0, #100]	; 0x64
 80007bc:	81c2      	strh	r2, [r0, #14]
 80007be:	6183      	str	r3, [r0, #24]
 80007c0:	4619      	mov	r1, r3
 80007c2:	2208      	movs	r2, #8
 80007c4:	305c      	adds	r0, #92	; 0x5c
 80007c6:	f7ff ffcf 	bl	8000768 <memset>
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <std+0x38>)
 80007cc:	6263      	str	r3, [r4, #36]	; 0x24
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <std+0x3c>)
 80007d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <std+0x40>)
 80007d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007d6:	4b05      	ldr	r3, [pc, #20]	; (80007ec <std+0x44>)
 80007d8:	6224      	str	r4, [r4, #32]
 80007da:	6323      	str	r3, [r4, #48]	; 0x30
 80007dc:	bd10      	pop	{r4, pc}
 80007de:	bf00      	nop
 80007e0:	08001049 	.word	0x08001049
 80007e4:	0800106b 	.word	0x0800106b
 80007e8:	080010a3 	.word	0x080010a3
 80007ec:	080010c7 	.word	0x080010c7

080007f0 <_cleanup_r>:
 80007f0:	4901      	ldr	r1, [pc, #4]	; (80007f8 <_cleanup_r+0x8>)
 80007f2:	f000 b8af 	b.w	8000954 <_fwalk_reent>
 80007f6:	bf00      	nop
 80007f8:	080013a1 	.word	0x080013a1

080007fc <__sfmoreglue>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	1e4a      	subs	r2, r1, #1
 8000800:	2568      	movs	r5, #104	; 0x68
 8000802:	4355      	muls	r5, r2
 8000804:	460e      	mov	r6, r1
 8000806:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800080a:	f000 f8c5 	bl	8000998 <_malloc_r>
 800080e:	4604      	mov	r4, r0
 8000810:	b140      	cbz	r0, 8000824 <__sfmoreglue+0x28>
 8000812:	2100      	movs	r1, #0
 8000814:	e9c0 1600 	strd	r1, r6, [r0]
 8000818:	300c      	adds	r0, #12
 800081a:	60a0      	str	r0, [r4, #8]
 800081c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000820:	f7ff ffa2 	bl	8000768 <memset>
 8000824:	4620      	mov	r0, r4
 8000826:	bd70      	pop	{r4, r5, r6, pc}

08000828 <__sfp_lock_acquire>:
 8000828:	4801      	ldr	r0, [pc, #4]	; (8000830 <__sfp_lock_acquire+0x8>)
 800082a:	f000 b8b3 	b.w	8000994 <__retarget_lock_acquire_recursive>
 800082e:	bf00      	nop
 8000830:	200000a0 	.word	0x200000a0

08000834 <__sfp_lock_release>:
 8000834:	4801      	ldr	r0, [pc, #4]	; (800083c <__sfp_lock_release+0x8>)
 8000836:	f000 b8ae 	b.w	8000996 <__retarget_lock_release_recursive>
 800083a:	bf00      	nop
 800083c:	200000a0 	.word	0x200000a0

08000840 <__sinit_lock_acquire>:
 8000840:	4801      	ldr	r0, [pc, #4]	; (8000848 <__sinit_lock_acquire+0x8>)
 8000842:	f000 b8a7 	b.w	8000994 <__retarget_lock_acquire_recursive>
 8000846:	bf00      	nop
 8000848:	2000009b 	.word	0x2000009b

0800084c <__sinit_lock_release>:
 800084c:	4801      	ldr	r0, [pc, #4]	; (8000854 <__sinit_lock_release+0x8>)
 800084e:	f000 b8a2 	b.w	8000996 <__retarget_lock_release_recursive>
 8000852:	bf00      	nop
 8000854:	2000009b 	.word	0x2000009b

08000858 <__sinit>:
 8000858:	b510      	push	{r4, lr}
 800085a:	4604      	mov	r4, r0
 800085c:	f7ff fff0 	bl	8000840 <__sinit_lock_acquire>
 8000860:	69a3      	ldr	r3, [r4, #24]
 8000862:	b11b      	cbz	r3, 800086c <__sinit+0x14>
 8000864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000868:	f7ff bff0 	b.w	800084c <__sinit_lock_release>
 800086c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000870:	6523      	str	r3, [r4, #80]	; 0x50
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <__sinit+0x68>)
 8000874:	4a13      	ldr	r2, [pc, #76]	; (80008c4 <__sinit+0x6c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	62a2      	str	r2, [r4, #40]	; 0x28
 800087a:	42a3      	cmp	r3, r4
 800087c:	bf04      	itt	eq
 800087e:	2301      	moveq	r3, #1
 8000880:	61a3      	streq	r3, [r4, #24]
 8000882:	4620      	mov	r0, r4
 8000884:	f000 f820 	bl	80008c8 <__sfp>
 8000888:	6060      	str	r0, [r4, #4]
 800088a:	4620      	mov	r0, r4
 800088c:	f000 f81c 	bl	80008c8 <__sfp>
 8000890:	60a0      	str	r0, [r4, #8]
 8000892:	4620      	mov	r0, r4
 8000894:	f000 f818 	bl	80008c8 <__sfp>
 8000898:	2200      	movs	r2, #0
 800089a:	60e0      	str	r0, [r4, #12]
 800089c:	2104      	movs	r1, #4
 800089e:	6860      	ldr	r0, [r4, #4]
 80008a0:	f7ff ff82 	bl	80007a8 <std>
 80008a4:	68a0      	ldr	r0, [r4, #8]
 80008a6:	2201      	movs	r2, #1
 80008a8:	2109      	movs	r1, #9
 80008aa:	f7ff ff7d 	bl	80007a8 <std>
 80008ae:	68e0      	ldr	r0, [r4, #12]
 80008b0:	2202      	movs	r2, #2
 80008b2:	2112      	movs	r1, #18
 80008b4:	f7ff ff78 	bl	80007a8 <std>
 80008b8:	2301      	movs	r3, #1
 80008ba:	61a3      	str	r3, [r4, #24]
 80008bc:	e7d2      	b.n	8000864 <__sinit+0xc>
 80008be:	bf00      	nop
 80008c0:	0800169c 	.word	0x0800169c
 80008c4:	080007f1 	.word	0x080007f1

080008c8 <__sfp>:
 80008c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ca:	4607      	mov	r7, r0
 80008cc:	f7ff ffac 	bl	8000828 <__sfp_lock_acquire>
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <__sfp+0x84>)
 80008d2:	681e      	ldr	r6, [r3, #0]
 80008d4:	69b3      	ldr	r3, [r6, #24]
 80008d6:	b913      	cbnz	r3, 80008de <__sfp+0x16>
 80008d8:	4630      	mov	r0, r6
 80008da:	f7ff ffbd 	bl	8000858 <__sinit>
 80008de:	3648      	adds	r6, #72	; 0x48
 80008e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80008e4:	3b01      	subs	r3, #1
 80008e6:	d503      	bpl.n	80008f0 <__sfp+0x28>
 80008e8:	6833      	ldr	r3, [r6, #0]
 80008ea:	b30b      	cbz	r3, 8000930 <__sfp+0x68>
 80008ec:	6836      	ldr	r6, [r6, #0]
 80008ee:	e7f7      	b.n	80008e0 <__sfp+0x18>
 80008f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80008f4:	b9d5      	cbnz	r5, 800092c <__sfp+0x64>
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <__sfp+0x88>)
 80008f8:	60e3      	str	r3, [r4, #12]
 80008fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80008fe:	6665      	str	r5, [r4, #100]	; 0x64
 8000900:	f000 f847 	bl	8000992 <__retarget_lock_init_recursive>
 8000904:	f7ff ff96 	bl	8000834 <__sfp_lock_release>
 8000908:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800090c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000910:	6025      	str	r5, [r4, #0]
 8000912:	61a5      	str	r5, [r4, #24]
 8000914:	2208      	movs	r2, #8
 8000916:	4629      	mov	r1, r5
 8000918:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800091c:	f7ff ff24 	bl	8000768 <memset>
 8000920:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000924:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000928:	4620      	mov	r0, r4
 800092a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800092c:	3468      	adds	r4, #104	; 0x68
 800092e:	e7d9      	b.n	80008e4 <__sfp+0x1c>
 8000930:	2104      	movs	r1, #4
 8000932:	4638      	mov	r0, r7
 8000934:	f7ff ff62 	bl	80007fc <__sfmoreglue>
 8000938:	4604      	mov	r4, r0
 800093a:	6030      	str	r0, [r6, #0]
 800093c:	2800      	cmp	r0, #0
 800093e:	d1d5      	bne.n	80008ec <__sfp+0x24>
 8000940:	f7ff ff78 	bl	8000834 <__sfp_lock_release>
 8000944:	230c      	movs	r3, #12
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	e7ee      	b.n	8000928 <__sfp+0x60>
 800094a:	bf00      	nop
 800094c:	0800169c 	.word	0x0800169c
 8000950:	ffff0001 	.word	0xffff0001

08000954 <_fwalk_reent>:
 8000954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000958:	4606      	mov	r6, r0
 800095a:	4688      	mov	r8, r1
 800095c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000960:	2700      	movs	r7, #0
 8000962:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000966:	f1b9 0901 	subs.w	r9, r9, #1
 800096a:	d505      	bpl.n	8000978 <_fwalk_reent+0x24>
 800096c:	6824      	ldr	r4, [r4, #0]
 800096e:	2c00      	cmp	r4, #0
 8000970:	d1f7      	bne.n	8000962 <_fwalk_reent+0xe>
 8000972:	4638      	mov	r0, r7
 8000974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000978:	89ab      	ldrh	r3, [r5, #12]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d907      	bls.n	800098e <_fwalk_reent+0x3a>
 800097e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000982:	3301      	adds	r3, #1
 8000984:	d003      	beq.n	800098e <_fwalk_reent+0x3a>
 8000986:	4629      	mov	r1, r5
 8000988:	4630      	mov	r0, r6
 800098a:	47c0      	blx	r8
 800098c:	4307      	orrs	r7, r0
 800098e:	3568      	adds	r5, #104	; 0x68
 8000990:	e7e9      	b.n	8000966 <_fwalk_reent+0x12>

08000992 <__retarget_lock_init_recursive>:
 8000992:	4770      	bx	lr

08000994 <__retarget_lock_acquire_recursive>:
 8000994:	4770      	bx	lr

08000996 <__retarget_lock_release_recursive>:
 8000996:	4770      	bx	lr

08000998 <_malloc_r>:
 8000998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099a:	1ccd      	adds	r5, r1, #3
 800099c:	f025 0503 	bic.w	r5, r5, #3
 80009a0:	3508      	adds	r5, #8
 80009a2:	2d0c      	cmp	r5, #12
 80009a4:	bf38      	it	cc
 80009a6:	250c      	movcc	r5, #12
 80009a8:	2d00      	cmp	r5, #0
 80009aa:	4606      	mov	r6, r0
 80009ac:	db01      	blt.n	80009b2 <_malloc_r+0x1a>
 80009ae:	42a9      	cmp	r1, r5
 80009b0:	d903      	bls.n	80009ba <_malloc_r+0x22>
 80009b2:	230c      	movs	r3, #12
 80009b4:	6033      	str	r3, [r6, #0]
 80009b6:	2000      	movs	r0, #0
 80009b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ba:	f000 fda3 	bl	8001504 <__malloc_lock>
 80009be:	4921      	ldr	r1, [pc, #132]	; (8000a44 <_malloc_r+0xac>)
 80009c0:	680a      	ldr	r2, [r1, #0]
 80009c2:	4614      	mov	r4, r2
 80009c4:	b99c      	cbnz	r4, 80009ee <_malloc_r+0x56>
 80009c6:	4f20      	ldr	r7, [pc, #128]	; (8000a48 <_malloc_r+0xb0>)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	b923      	cbnz	r3, 80009d6 <_malloc_r+0x3e>
 80009cc:	4621      	mov	r1, r4
 80009ce:	4630      	mov	r0, r6
 80009d0:	f000 fb2a 	bl	8001028 <_sbrk_r>
 80009d4:	6038      	str	r0, [r7, #0]
 80009d6:	4629      	mov	r1, r5
 80009d8:	4630      	mov	r0, r6
 80009da:	f000 fb25 	bl	8001028 <_sbrk_r>
 80009de:	1c43      	adds	r3, r0, #1
 80009e0:	d123      	bne.n	8000a2a <_malloc_r+0x92>
 80009e2:	230c      	movs	r3, #12
 80009e4:	6033      	str	r3, [r6, #0]
 80009e6:	4630      	mov	r0, r6
 80009e8:	f000 fd92 	bl	8001510 <__malloc_unlock>
 80009ec:	e7e3      	b.n	80009b6 <_malloc_r+0x1e>
 80009ee:	6823      	ldr	r3, [r4, #0]
 80009f0:	1b5b      	subs	r3, r3, r5
 80009f2:	d417      	bmi.n	8000a24 <_malloc_r+0x8c>
 80009f4:	2b0b      	cmp	r3, #11
 80009f6:	d903      	bls.n	8000a00 <_malloc_r+0x68>
 80009f8:	6023      	str	r3, [r4, #0]
 80009fa:	441c      	add	r4, r3
 80009fc:	6025      	str	r5, [r4, #0]
 80009fe:	e004      	b.n	8000a0a <_malloc_r+0x72>
 8000a00:	6863      	ldr	r3, [r4, #4]
 8000a02:	42a2      	cmp	r2, r4
 8000a04:	bf0c      	ite	eq
 8000a06:	600b      	streq	r3, [r1, #0]
 8000a08:	6053      	strne	r3, [r2, #4]
 8000a0a:	4630      	mov	r0, r6
 8000a0c:	f000 fd80 	bl	8001510 <__malloc_unlock>
 8000a10:	f104 000b 	add.w	r0, r4, #11
 8000a14:	1d23      	adds	r3, r4, #4
 8000a16:	f020 0007 	bic.w	r0, r0, #7
 8000a1a:	1ac2      	subs	r2, r0, r3
 8000a1c:	d0cc      	beq.n	80009b8 <_malloc_r+0x20>
 8000a1e:	1a1b      	subs	r3, r3, r0
 8000a20:	50a3      	str	r3, [r4, r2]
 8000a22:	e7c9      	b.n	80009b8 <_malloc_r+0x20>
 8000a24:	4622      	mov	r2, r4
 8000a26:	6864      	ldr	r4, [r4, #4]
 8000a28:	e7cc      	b.n	80009c4 <_malloc_r+0x2c>
 8000a2a:	1cc4      	adds	r4, r0, #3
 8000a2c:	f024 0403 	bic.w	r4, r4, #3
 8000a30:	42a0      	cmp	r0, r4
 8000a32:	d0e3      	beq.n	80009fc <_malloc_r+0x64>
 8000a34:	1a21      	subs	r1, r4, r0
 8000a36:	4630      	mov	r0, r6
 8000a38:	f000 faf6 	bl	8001028 <_sbrk_r>
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	d1dd      	bne.n	80009fc <_malloc_r+0x64>
 8000a40:	e7cf      	b.n	80009e2 <_malloc_r+0x4a>
 8000a42:	bf00      	nop
 8000a44:	20000088 	.word	0x20000088
 8000a48:	2000008c 	.word	0x2000008c

08000a4c <__sfputc_r>:
 8000a4c:	6893      	ldr	r3, [r2, #8]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	b410      	push	{r4}
 8000a54:	6093      	str	r3, [r2, #8]
 8000a56:	da08      	bge.n	8000a6a <__sfputc_r+0x1e>
 8000a58:	6994      	ldr	r4, [r2, #24]
 8000a5a:	42a3      	cmp	r3, r4
 8000a5c:	db01      	blt.n	8000a62 <__sfputc_r+0x16>
 8000a5e:	290a      	cmp	r1, #10
 8000a60:	d103      	bne.n	8000a6a <__sfputc_r+0x1e>
 8000a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a66:	f000 bb33 	b.w	80010d0 <__swbuf_r>
 8000a6a:	6813      	ldr	r3, [r2, #0]
 8000a6c:	1c58      	adds	r0, r3, #1
 8000a6e:	6010      	str	r0, [r2, #0]
 8000a70:	7019      	strb	r1, [r3, #0]
 8000a72:	4608      	mov	r0, r1
 8000a74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <__sfputs_r>:
 8000a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7c:	4606      	mov	r6, r0
 8000a7e:	460f      	mov	r7, r1
 8000a80:	4614      	mov	r4, r2
 8000a82:	18d5      	adds	r5, r2, r3
 8000a84:	42ac      	cmp	r4, r5
 8000a86:	d101      	bne.n	8000a8c <__sfputs_r+0x12>
 8000a88:	2000      	movs	r0, #0
 8000a8a:	e007      	b.n	8000a9c <__sfputs_r+0x22>
 8000a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a90:	463a      	mov	r2, r7
 8000a92:	4630      	mov	r0, r6
 8000a94:	f7ff ffda 	bl	8000a4c <__sfputc_r>
 8000a98:	1c43      	adds	r3, r0, #1
 8000a9a:	d1f3      	bne.n	8000a84 <__sfputs_r+0xa>
 8000a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000aa0 <_vfiprintf_r>:
 8000aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aa4:	460d      	mov	r5, r1
 8000aa6:	b09d      	sub	sp, #116	; 0x74
 8000aa8:	4614      	mov	r4, r2
 8000aaa:	4698      	mov	r8, r3
 8000aac:	4606      	mov	r6, r0
 8000aae:	b118      	cbz	r0, 8000ab8 <_vfiprintf_r+0x18>
 8000ab0:	6983      	ldr	r3, [r0, #24]
 8000ab2:	b90b      	cbnz	r3, 8000ab8 <_vfiprintf_r+0x18>
 8000ab4:	f7ff fed0 	bl	8000858 <__sinit>
 8000ab8:	4b89      	ldr	r3, [pc, #548]	; (8000ce0 <_vfiprintf_r+0x240>)
 8000aba:	429d      	cmp	r5, r3
 8000abc:	d11b      	bne.n	8000af6 <_vfiprintf_r+0x56>
 8000abe:	6875      	ldr	r5, [r6, #4]
 8000ac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ac2:	07d9      	lsls	r1, r3, #31
 8000ac4:	d405      	bmi.n	8000ad2 <_vfiprintf_r+0x32>
 8000ac6:	89ab      	ldrh	r3, [r5, #12]
 8000ac8:	059a      	lsls	r2, r3, #22
 8000aca:	d402      	bmi.n	8000ad2 <_vfiprintf_r+0x32>
 8000acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ace:	f7ff ff61 	bl	8000994 <__retarget_lock_acquire_recursive>
 8000ad2:	89ab      	ldrh	r3, [r5, #12]
 8000ad4:	071b      	lsls	r3, r3, #28
 8000ad6:	d501      	bpl.n	8000adc <_vfiprintf_r+0x3c>
 8000ad8:	692b      	ldr	r3, [r5, #16]
 8000ada:	b9eb      	cbnz	r3, 8000b18 <_vfiprintf_r+0x78>
 8000adc:	4629      	mov	r1, r5
 8000ade:	4630      	mov	r0, r6
 8000ae0:	f000 fb5a 	bl	8001198 <__swsetup_r>
 8000ae4:	b1c0      	cbz	r0, 8000b18 <_vfiprintf_r+0x78>
 8000ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ae8:	07dc      	lsls	r4, r3, #31
 8000aea:	d50e      	bpl.n	8000b0a <_vfiprintf_r+0x6a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	b01d      	add	sp, #116	; 0x74
 8000af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000af6:	4b7b      	ldr	r3, [pc, #492]	; (8000ce4 <_vfiprintf_r+0x244>)
 8000af8:	429d      	cmp	r5, r3
 8000afa:	d101      	bne.n	8000b00 <_vfiprintf_r+0x60>
 8000afc:	68b5      	ldr	r5, [r6, #8]
 8000afe:	e7df      	b.n	8000ac0 <_vfiprintf_r+0x20>
 8000b00:	4b79      	ldr	r3, [pc, #484]	; (8000ce8 <_vfiprintf_r+0x248>)
 8000b02:	429d      	cmp	r5, r3
 8000b04:	bf08      	it	eq
 8000b06:	68f5      	ldreq	r5, [r6, #12]
 8000b08:	e7da      	b.n	8000ac0 <_vfiprintf_r+0x20>
 8000b0a:	89ab      	ldrh	r3, [r5, #12]
 8000b0c:	0598      	lsls	r0, r3, #22
 8000b0e:	d4ed      	bmi.n	8000aec <_vfiprintf_r+0x4c>
 8000b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b12:	f7ff ff40 	bl	8000996 <__retarget_lock_release_recursive>
 8000b16:	e7e9      	b.n	8000aec <_vfiprintf_r+0x4c>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b22:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b26:	2330      	movs	r3, #48	; 0x30
 8000b28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000cec <_vfiprintf_r+0x24c>
 8000b2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b30:	f04f 0901 	mov.w	r9, #1
 8000b34:	4623      	mov	r3, r4
 8000b36:	469a      	mov	sl, r3
 8000b38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b3c:	b10a      	cbz	r2, 8000b42 <_vfiprintf_r+0xa2>
 8000b3e:	2a25      	cmp	r2, #37	; 0x25
 8000b40:	d1f9      	bne.n	8000b36 <_vfiprintf_r+0x96>
 8000b42:	ebba 0b04 	subs.w	fp, sl, r4
 8000b46:	d00b      	beq.n	8000b60 <_vfiprintf_r+0xc0>
 8000b48:	465b      	mov	r3, fp
 8000b4a:	4622      	mov	r2, r4
 8000b4c:	4629      	mov	r1, r5
 8000b4e:	4630      	mov	r0, r6
 8000b50:	f7ff ff93 	bl	8000a7a <__sfputs_r>
 8000b54:	3001      	adds	r0, #1
 8000b56:	f000 80aa 	beq.w	8000cae <_vfiprintf_r+0x20e>
 8000b5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b5c:	445a      	add	r2, fp
 8000b5e:	9209      	str	r2, [sp, #36]	; 0x24
 8000b60:	f89a 3000 	ldrb.w	r3, [sl]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f000 80a2 	beq.w	8000cae <_vfiprintf_r+0x20e>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b74:	f10a 0a01 	add.w	sl, sl, #1
 8000b78:	9304      	str	r3, [sp, #16]
 8000b7a:	9307      	str	r3, [sp, #28]
 8000b7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b80:	931a      	str	r3, [sp, #104]	; 0x68
 8000b82:	4654      	mov	r4, sl
 8000b84:	2205      	movs	r2, #5
 8000b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b8a:	4858      	ldr	r0, [pc, #352]	; (8000cec <_vfiprintf_r+0x24c>)
 8000b8c:	f7ff fb28 	bl	80001e0 <memchr>
 8000b90:	9a04      	ldr	r2, [sp, #16]
 8000b92:	b9d8      	cbnz	r0, 8000bcc <_vfiprintf_r+0x12c>
 8000b94:	06d1      	lsls	r1, r2, #27
 8000b96:	bf44      	itt	mi
 8000b98:	2320      	movmi	r3, #32
 8000b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b9e:	0713      	lsls	r3, r2, #28
 8000ba0:	bf44      	itt	mi
 8000ba2:	232b      	movmi	r3, #43	; 0x2b
 8000ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8000bac:	2b2a      	cmp	r3, #42	; 0x2a
 8000bae:	d015      	beq.n	8000bdc <_vfiprintf_r+0x13c>
 8000bb0:	9a07      	ldr	r2, [sp, #28]
 8000bb2:	4654      	mov	r4, sl
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f04f 0c0a 	mov.w	ip, #10
 8000bba:	4621      	mov	r1, r4
 8000bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bc0:	3b30      	subs	r3, #48	; 0x30
 8000bc2:	2b09      	cmp	r3, #9
 8000bc4:	d94e      	bls.n	8000c64 <_vfiprintf_r+0x1c4>
 8000bc6:	b1b0      	cbz	r0, 8000bf6 <_vfiprintf_r+0x156>
 8000bc8:	9207      	str	r2, [sp, #28]
 8000bca:	e014      	b.n	8000bf6 <_vfiprintf_r+0x156>
 8000bcc:	eba0 0308 	sub.w	r3, r0, r8
 8000bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	9304      	str	r3, [sp, #16]
 8000bd8:	46a2      	mov	sl, r4
 8000bda:	e7d2      	b.n	8000b82 <_vfiprintf_r+0xe2>
 8000bdc:	9b03      	ldr	r3, [sp, #12]
 8000bde:	1d19      	adds	r1, r3, #4
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	9103      	str	r1, [sp, #12]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	bfbb      	ittet	lt
 8000be8:	425b      	neglt	r3, r3
 8000bea:	f042 0202 	orrlt.w	r2, r2, #2
 8000bee:	9307      	strge	r3, [sp, #28]
 8000bf0:	9307      	strlt	r3, [sp, #28]
 8000bf2:	bfb8      	it	lt
 8000bf4:	9204      	strlt	r2, [sp, #16]
 8000bf6:	7823      	ldrb	r3, [r4, #0]
 8000bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8000bfa:	d10c      	bne.n	8000c16 <_vfiprintf_r+0x176>
 8000bfc:	7863      	ldrb	r3, [r4, #1]
 8000bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8000c00:	d135      	bne.n	8000c6e <_vfiprintf_r+0x1ce>
 8000c02:	9b03      	ldr	r3, [sp, #12]
 8000c04:	1d1a      	adds	r2, r3, #4
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	9203      	str	r2, [sp, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	bfb8      	it	lt
 8000c0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000c12:	3402      	adds	r4, #2
 8000c14:	9305      	str	r3, [sp, #20]
 8000c16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000cfc <_vfiprintf_r+0x25c>
 8000c1a:	7821      	ldrb	r1, [r4, #0]
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	4650      	mov	r0, sl
 8000c20:	f7ff fade 	bl	80001e0 <memchr>
 8000c24:	b140      	cbz	r0, 8000c38 <_vfiprintf_r+0x198>
 8000c26:	2340      	movs	r3, #64	; 0x40
 8000c28:	eba0 000a 	sub.w	r0, r0, sl
 8000c2c:	fa03 f000 	lsl.w	r0, r3, r0
 8000c30:	9b04      	ldr	r3, [sp, #16]
 8000c32:	4303      	orrs	r3, r0
 8000c34:	3401      	adds	r4, #1
 8000c36:	9304      	str	r3, [sp, #16]
 8000c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c3c:	482c      	ldr	r0, [pc, #176]	; (8000cf0 <_vfiprintf_r+0x250>)
 8000c3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c42:	2206      	movs	r2, #6
 8000c44:	f7ff facc 	bl	80001e0 <memchr>
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	d03f      	beq.n	8000ccc <_vfiprintf_r+0x22c>
 8000c4c:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <_vfiprintf_r+0x254>)
 8000c4e:	bb1b      	cbnz	r3, 8000c98 <_vfiprintf_r+0x1f8>
 8000c50:	9b03      	ldr	r3, [sp, #12]
 8000c52:	3307      	adds	r3, #7
 8000c54:	f023 0307 	bic.w	r3, r3, #7
 8000c58:	3308      	adds	r3, #8
 8000c5a:	9303      	str	r3, [sp, #12]
 8000c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c5e:	443b      	add	r3, r7
 8000c60:	9309      	str	r3, [sp, #36]	; 0x24
 8000c62:	e767      	b.n	8000b34 <_vfiprintf_r+0x94>
 8000c64:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c68:	460c      	mov	r4, r1
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	e7a5      	b.n	8000bba <_vfiprintf_r+0x11a>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	3401      	adds	r4, #1
 8000c72:	9305      	str	r3, [sp, #20]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f04f 0c0a 	mov.w	ip, #10
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c80:	3a30      	subs	r2, #48	; 0x30
 8000c82:	2a09      	cmp	r2, #9
 8000c84:	d903      	bls.n	8000c8e <_vfiprintf_r+0x1ee>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0c5      	beq.n	8000c16 <_vfiprintf_r+0x176>
 8000c8a:	9105      	str	r1, [sp, #20]
 8000c8c:	e7c3      	b.n	8000c16 <_vfiprintf_r+0x176>
 8000c8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c92:	4604      	mov	r4, r0
 8000c94:	2301      	movs	r3, #1
 8000c96:	e7f0      	b.n	8000c7a <_vfiprintf_r+0x1da>
 8000c98:	ab03      	add	r3, sp, #12
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	462a      	mov	r2, r5
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <_vfiprintf_r+0x258>)
 8000ca0:	a904      	add	r1, sp, #16
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	f3af 8000 	nop.w
 8000ca8:	4607      	mov	r7, r0
 8000caa:	1c78      	adds	r0, r7, #1
 8000cac:	d1d6      	bne.n	8000c5c <_vfiprintf_r+0x1bc>
 8000cae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000cb0:	07d9      	lsls	r1, r3, #31
 8000cb2:	d405      	bmi.n	8000cc0 <_vfiprintf_r+0x220>
 8000cb4:	89ab      	ldrh	r3, [r5, #12]
 8000cb6:	059a      	lsls	r2, r3, #22
 8000cb8:	d402      	bmi.n	8000cc0 <_vfiprintf_r+0x220>
 8000cba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cbc:	f7ff fe6b 	bl	8000996 <__retarget_lock_release_recursive>
 8000cc0:	89ab      	ldrh	r3, [r5, #12]
 8000cc2:	065b      	lsls	r3, r3, #25
 8000cc4:	f53f af12 	bmi.w	8000aec <_vfiprintf_r+0x4c>
 8000cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000cca:	e711      	b.n	8000af0 <_vfiprintf_r+0x50>
 8000ccc:	ab03      	add	r3, sp, #12
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	462a      	mov	r2, r5
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <_vfiprintf_r+0x258>)
 8000cd4:	a904      	add	r1, sp, #16
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	f000 f880 	bl	8000ddc <_printf_i>
 8000cdc:	e7e4      	b.n	8000ca8 <_vfiprintf_r+0x208>
 8000cde:	bf00      	nop
 8000ce0:	080016c0 	.word	0x080016c0
 8000ce4:	080016e0 	.word	0x080016e0
 8000ce8:	080016a0 	.word	0x080016a0
 8000cec:	08001700 	.word	0x08001700
 8000cf0:	0800170a 	.word	0x0800170a
 8000cf4:	00000000 	.word	0x00000000
 8000cf8:	08000a7b 	.word	0x08000a7b
 8000cfc:	08001706 	.word	0x08001706

08000d00 <_printf_common>:
 8000d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d04:	4616      	mov	r6, r2
 8000d06:	4699      	mov	r9, r3
 8000d08:	688a      	ldr	r2, [r1, #8]
 8000d0a:	690b      	ldr	r3, [r1, #16]
 8000d0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d10:	4293      	cmp	r3, r2
 8000d12:	bfb8      	it	lt
 8000d14:	4613      	movlt	r3, r2
 8000d16:	6033      	str	r3, [r6, #0]
 8000d18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d1c:	4607      	mov	r7, r0
 8000d1e:	460c      	mov	r4, r1
 8000d20:	b10a      	cbz	r2, 8000d26 <_printf_common+0x26>
 8000d22:	3301      	adds	r3, #1
 8000d24:	6033      	str	r3, [r6, #0]
 8000d26:	6823      	ldr	r3, [r4, #0]
 8000d28:	0699      	lsls	r1, r3, #26
 8000d2a:	bf42      	ittt	mi
 8000d2c:	6833      	ldrmi	r3, [r6, #0]
 8000d2e:	3302      	addmi	r3, #2
 8000d30:	6033      	strmi	r3, [r6, #0]
 8000d32:	6825      	ldr	r5, [r4, #0]
 8000d34:	f015 0506 	ands.w	r5, r5, #6
 8000d38:	d106      	bne.n	8000d48 <_printf_common+0x48>
 8000d3a:	f104 0a19 	add.w	sl, r4, #25
 8000d3e:	68e3      	ldr	r3, [r4, #12]
 8000d40:	6832      	ldr	r2, [r6, #0]
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	42ab      	cmp	r3, r5
 8000d46:	dc26      	bgt.n	8000d96 <_printf_common+0x96>
 8000d48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d4c:	1e13      	subs	r3, r2, #0
 8000d4e:	6822      	ldr	r2, [r4, #0]
 8000d50:	bf18      	it	ne
 8000d52:	2301      	movne	r3, #1
 8000d54:	0692      	lsls	r2, r2, #26
 8000d56:	d42b      	bmi.n	8000db0 <_printf_common+0xb0>
 8000d58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d5c:	4649      	mov	r1, r9
 8000d5e:	4638      	mov	r0, r7
 8000d60:	47c0      	blx	r8
 8000d62:	3001      	adds	r0, #1
 8000d64:	d01e      	beq.n	8000da4 <_printf_common+0xa4>
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	68e5      	ldr	r5, [r4, #12]
 8000d6a:	6832      	ldr	r2, [r6, #0]
 8000d6c:	f003 0306 	and.w	r3, r3, #6
 8000d70:	2b04      	cmp	r3, #4
 8000d72:	bf08      	it	eq
 8000d74:	1aad      	subeq	r5, r5, r2
 8000d76:	68a3      	ldr	r3, [r4, #8]
 8000d78:	6922      	ldr	r2, [r4, #16]
 8000d7a:	bf0c      	ite	eq
 8000d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d80:	2500      	movne	r5, #0
 8000d82:	4293      	cmp	r3, r2
 8000d84:	bfc4      	itt	gt
 8000d86:	1a9b      	subgt	r3, r3, r2
 8000d88:	18ed      	addgt	r5, r5, r3
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	341a      	adds	r4, #26
 8000d8e:	42b5      	cmp	r5, r6
 8000d90:	d11a      	bne.n	8000dc8 <_printf_common+0xc8>
 8000d92:	2000      	movs	r0, #0
 8000d94:	e008      	b.n	8000da8 <_printf_common+0xa8>
 8000d96:	2301      	movs	r3, #1
 8000d98:	4652      	mov	r2, sl
 8000d9a:	4649      	mov	r1, r9
 8000d9c:	4638      	mov	r0, r7
 8000d9e:	47c0      	blx	r8
 8000da0:	3001      	adds	r0, #1
 8000da2:	d103      	bne.n	8000dac <_printf_common+0xac>
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dac:	3501      	adds	r5, #1
 8000dae:	e7c6      	b.n	8000d3e <_printf_common+0x3e>
 8000db0:	18e1      	adds	r1, r4, r3
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	2030      	movs	r0, #48	; 0x30
 8000db6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000dba:	4422      	add	r2, r4
 8000dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000dc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	e7c7      	b.n	8000d58 <_printf_common+0x58>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	4622      	mov	r2, r4
 8000dcc:	4649      	mov	r1, r9
 8000dce:	4638      	mov	r0, r7
 8000dd0:	47c0      	blx	r8
 8000dd2:	3001      	adds	r0, #1
 8000dd4:	d0e6      	beq.n	8000da4 <_printf_common+0xa4>
 8000dd6:	3601      	adds	r6, #1
 8000dd8:	e7d9      	b.n	8000d8e <_printf_common+0x8e>
	...

08000ddc <_printf_i>:
 8000ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	460c      	mov	r4, r1
 8000de2:	4691      	mov	r9, r2
 8000de4:	7e27      	ldrb	r7, [r4, #24]
 8000de6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000de8:	2f78      	cmp	r7, #120	; 0x78
 8000dea:	4680      	mov	r8, r0
 8000dec:	469a      	mov	sl, r3
 8000dee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000df2:	d807      	bhi.n	8000e04 <_printf_i+0x28>
 8000df4:	2f62      	cmp	r7, #98	; 0x62
 8000df6:	d80a      	bhi.n	8000e0e <_printf_i+0x32>
 8000df8:	2f00      	cmp	r7, #0
 8000dfa:	f000 80d8 	beq.w	8000fae <_printf_i+0x1d2>
 8000dfe:	2f58      	cmp	r7, #88	; 0x58
 8000e00:	f000 80a3 	beq.w	8000f4a <_printf_i+0x16e>
 8000e04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000e08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000e0c:	e03a      	b.n	8000e84 <_printf_i+0xa8>
 8000e0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000e12:	2b15      	cmp	r3, #21
 8000e14:	d8f6      	bhi.n	8000e04 <_printf_i+0x28>
 8000e16:	a001      	add	r0, pc, #4	; (adr r0, 8000e1c <_printf_i+0x40>)
 8000e18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000e1c:	08000e75 	.word	0x08000e75
 8000e20:	08000e89 	.word	0x08000e89
 8000e24:	08000e05 	.word	0x08000e05
 8000e28:	08000e05 	.word	0x08000e05
 8000e2c:	08000e05 	.word	0x08000e05
 8000e30:	08000e05 	.word	0x08000e05
 8000e34:	08000e89 	.word	0x08000e89
 8000e38:	08000e05 	.word	0x08000e05
 8000e3c:	08000e05 	.word	0x08000e05
 8000e40:	08000e05 	.word	0x08000e05
 8000e44:	08000e05 	.word	0x08000e05
 8000e48:	08000f95 	.word	0x08000f95
 8000e4c:	08000eb9 	.word	0x08000eb9
 8000e50:	08000f77 	.word	0x08000f77
 8000e54:	08000e05 	.word	0x08000e05
 8000e58:	08000e05 	.word	0x08000e05
 8000e5c:	08000fb7 	.word	0x08000fb7
 8000e60:	08000e05 	.word	0x08000e05
 8000e64:	08000eb9 	.word	0x08000eb9
 8000e68:	08000e05 	.word	0x08000e05
 8000e6c:	08000e05 	.word	0x08000e05
 8000e70:	08000f7f 	.word	0x08000f7f
 8000e74:	680b      	ldr	r3, [r1, #0]
 8000e76:	1d1a      	adds	r2, r3, #4
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	600a      	str	r2, [r1, #0]
 8000e7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000e80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e84:	2301      	movs	r3, #1
 8000e86:	e0a3      	b.n	8000fd0 <_printf_i+0x1f4>
 8000e88:	6825      	ldr	r5, [r4, #0]
 8000e8a:	6808      	ldr	r0, [r1, #0]
 8000e8c:	062e      	lsls	r6, r5, #24
 8000e8e:	f100 0304 	add.w	r3, r0, #4
 8000e92:	d50a      	bpl.n	8000eaa <_printf_i+0xce>
 8000e94:	6805      	ldr	r5, [r0, #0]
 8000e96:	600b      	str	r3, [r1, #0]
 8000e98:	2d00      	cmp	r5, #0
 8000e9a:	da03      	bge.n	8000ea4 <_printf_i+0xc8>
 8000e9c:	232d      	movs	r3, #45	; 0x2d
 8000e9e:	426d      	negs	r5, r5
 8000ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ea4:	485e      	ldr	r0, [pc, #376]	; (8001020 <_printf_i+0x244>)
 8000ea6:	230a      	movs	r3, #10
 8000ea8:	e019      	b.n	8000ede <_printf_i+0x102>
 8000eaa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000eae:	6805      	ldr	r5, [r0, #0]
 8000eb0:	600b      	str	r3, [r1, #0]
 8000eb2:	bf18      	it	ne
 8000eb4:	b22d      	sxthne	r5, r5
 8000eb6:	e7ef      	b.n	8000e98 <_printf_i+0xbc>
 8000eb8:	680b      	ldr	r3, [r1, #0]
 8000eba:	6825      	ldr	r5, [r4, #0]
 8000ebc:	1d18      	adds	r0, r3, #4
 8000ebe:	6008      	str	r0, [r1, #0]
 8000ec0:	0628      	lsls	r0, r5, #24
 8000ec2:	d501      	bpl.n	8000ec8 <_printf_i+0xec>
 8000ec4:	681d      	ldr	r5, [r3, #0]
 8000ec6:	e002      	b.n	8000ece <_printf_i+0xf2>
 8000ec8:	0669      	lsls	r1, r5, #25
 8000eca:	d5fb      	bpl.n	8000ec4 <_printf_i+0xe8>
 8000ecc:	881d      	ldrh	r5, [r3, #0]
 8000ece:	4854      	ldr	r0, [pc, #336]	; (8001020 <_printf_i+0x244>)
 8000ed0:	2f6f      	cmp	r7, #111	; 0x6f
 8000ed2:	bf0c      	ite	eq
 8000ed4:	2308      	moveq	r3, #8
 8000ed6:	230a      	movne	r3, #10
 8000ed8:	2100      	movs	r1, #0
 8000eda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000ede:	6866      	ldr	r6, [r4, #4]
 8000ee0:	60a6      	str	r6, [r4, #8]
 8000ee2:	2e00      	cmp	r6, #0
 8000ee4:	bfa2      	ittt	ge
 8000ee6:	6821      	ldrge	r1, [r4, #0]
 8000ee8:	f021 0104 	bicge.w	r1, r1, #4
 8000eec:	6021      	strge	r1, [r4, #0]
 8000eee:	b90d      	cbnz	r5, 8000ef4 <_printf_i+0x118>
 8000ef0:	2e00      	cmp	r6, #0
 8000ef2:	d04d      	beq.n	8000f90 <_printf_i+0x1b4>
 8000ef4:	4616      	mov	r6, r2
 8000ef6:	fbb5 f1f3 	udiv	r1, r5, r3
 8000efa:	fb03 5711 	mls	r7, r3, r1, r5
 8000efe:	5dc7      	ldrb	r7, [r0, r7]
 8000f00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f04:	462f      	mov	r7, r5
 8000f06:	42bb      	cmp	r3, r7
 8000f08:	460d      	mov	r5, r1
 8000f0a:	d9f4      	bls.n	8000ef6 <_printf_i+0x11a>
 8000f0c:	2b08      	cmp	r3, #8
 8000f0e:	d10b      	bne.n	8000f28 <_printf_i+0x14c>
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	07df      	lsls	r7, r3, #31
 8000f14:	d508      	bpl.n	8000f28 <_printf_i+0x14c>
 8000f16:	6923      	ldr	r3, [r4, #16]
 8000f18:	6861      	ldr	r1, [r4, #4]
 8000f1a:	4299      	cmp	r1, r3
 8000f1c:	bfde      	ittt	le
 8000f1e:	2330      	movle	r3, #48	; 0x30
 8000f20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000f28:	1b92      	subs	r2, r2, r6
 8000f2a:	6122      	str	r2, [r4, #16]
 8000f2c:	f8cd a000 	str.w	sl, [sp]
 8000f30:	464b      	mov	r3, r9
 8000f32:	aa03      	add	r2, sp, #12
 8000f34:	4621      	mov	r1, r4
 8000f36:	4640      	mov	r0, r8
 8000f38:	f7ff fee2 	bl	8000d00 <_printf_common>
 8000f3c:	3001      	adds	r0, #1
 8000f3e:	d14c      	bne.n	8000fda <_printf_i+0x1fe>
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	b004      	add	sp, #16
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	4835      	ldr	r0, [pc, #212]	; (8001020 <_printf_i+0x244>)
 8000f4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000f50:	6823      	ldr	r3, [r4, #0]
 8000f52:	680e      	ldr	r6, [r1, #0]
 8000f54:	061f      	lsls	r7, r3, #24
 8000f56:	f856 5b04 	ldr.w	r5, [r6], #4
 8000f5a:	600e      	str	r6, [r1, #0]
 8000f5c:	d514      	bpl.n	8000f88 <_printf_i+0x1ac>
 8000f5e:	07d9      	lsls	r1, r3, #31
 8000f60:	bf44      	itt	mi
 8000f62:	f043 0320 	orrmi.w	r3, r3, #32
 8000f66:	6023      	strmi	r3, [r4, #0]
 8000f68:	b91d      	cbnz	r5, 8000f72 <_printf_i+0x196>
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	f023 0320 	bic.w	r3, r3, #32
 8000f70:	6023      	str	r3, [r4, #0]
 8000f72:	2310      	movs	r3, #16
 8000f74:	e7b0      	b.n	8000ed8 <_printf_i+0xfc>
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	f043 0320 	orr.w	r3, r3, #32
 8000f7c:	6023      	str	r3, [r4, #0]
 8000f7e:	2378      	movs	r3, #120	; 0x78
 8000f80:	4828      	ldr	r0, [pc, #160]	; (8001024 <_printf_i+0x248>)
 8000f82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f86:	e7e3      	b.n	8000f50 <_printf_i+0x174>
 8000f88:	065e      	lsls	r6, r3, #25
 8000f8a:	bf48      	it	mi
 8000f8c:	b2ad      	uxthmi	r5, r5
 8000f8e:	e7e6      	b.n	8000f5e <_printf_i+0x182>
 8000f90:	4616      	mov	r6, r2
 8000f92:	e7bb      	b.n	8000f0c <_printf_i+0x130>
 8000f94:	680b      	ldr	r3, [r1, #0]
 8000f96:	6826      	ldr	r6, [r4, #0]
 8000f98:	6960      	ldr	r0, [r4, #20]
 8000f9a:	1d1d      	adds	r5, r3, #4
 8000f9c:	600d      	str	r5, [r1, #0]
 8000f9e:	0635      	lsls	r5, r6, #24
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	d501      	bpl.n	8000fa8 <_printf_i+0x1cc>
 8000fa4:	6018      	str	r0, [r3, #0]
 8000fa6:	e002      	b.n	8000fae <_printf_i+0x1d2>
 8000fa8:	0671      	lsls	r1, r6, #25
 8000faa:	d5fb      	bpl.n	8000fa4 <_printf_i+0x1c8>
 8000fac:	8018      	strh	r0, [r3, #0]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	6123      	str	r3, [r4, #16]
 8000fb2:	4616      	mov	r6, r2
 8000fb4:	e7ba      	b.n	8000f2c <_printf_i+0x150>
 8000fb6:	680b      	ldr	r3, [r1, #0]
 8000fb8:	1d1a      	adds	r2, r3, #4
 8000fba:	600a      	str	r2, [r1, #0]
 8000fbc:	681e      	ldr	r6, [r3, #0]
 8000fbe:	6862      	ldr	r2, [r4, #4]
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	f7ff f90c 	bl	80001e0 <memchr>
 8000fc8:	b108      	cbz	r0, 8000fce <_printf_i+0x1f2>
 8000fca:	1b80      	subs	r0, r0, r6
 8000fcc:	6060      	str	r0, [r4, #4]
 8000fce:	6863      	ldr	r3, [r4, #4]
 8000fd0:	6123      	str	r3, [r4, #16]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fd8:	e7a8      	b.n	8000f2c <_printf_i+0x150>
 8000fda:	6923      	ldr	r3, [r4, #16]
 8000fdc:	4632      	mov	r2, r6
 8000fde:	4649      	mov	r1, r9
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	47d0      	blx	sl
 8000fe4:	3001      	adds	r0, #1
 8000fe6:	d0ab      	beq.n	8000f40 <_printf_i+0x164>
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	079b      	lsls	r3, r3, #30
 8000fec:	d413      	bmi.n	8001016 <_printf_i+0x23a>
 8000fee:	68e0      	ldr	r0, [r4, #12]
 8000ff0:	9b03      	ldr	r3, [sp, #12]
 8000ff2:	4298      	cmp	r0, r3
 8000ff4:	bfb8      	it	lt
 8000ff6:	4618      	movlt	r0, r3
 8000ff8:	e7a4      	b.n	8000f44 <_printf_i+0x168>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	4632      	mov	r2, r6
 8000ffe:	4649      	mov	r1, r9
 8001000:	4640      	mov	r0, r8
 8001002:	47d0      	blx	sl
 8001004:	3001      	adds	r0, #1
 8001006:	d09b      	beq.n	8000f40 <_printf_i+0x164>
 8001008:	3501      	adds	r5, #1
 800100a:	68e3      	ldr	r3, [r4, #12]
 800100c:	9903      	ldr	r1, [sp, #12]
 800100e:	1a5b      	subs	r3, r3, r1
 8001010:	42ab      	cmp	r3, r5
 8001012:	dcf2      	bgt.n	8000ffa <_printf_i+0x21e>
 8001014:	e7eb      	b.n	8000fee <_printf_i+0x212>
 8001016:	2500      	movs	r5, #0
 8001018:	f104 0619 	add.w	r6, r4, #25
 800101c:	e7f5      	b.n	800100a <_printf_i+0x22e>
 800101e:	bf00      	nop
 8001020:	08001711 	.word	0x08001711
 8001024:	08001722 	.word	0x08001722

08001028 <_sbrk_r>:
 8001028:	b538      	push	{r3, r4, r5, lr}
 800102a:	4d06      	ldr	r5, [pc, #24]	; (8001044 <_sbrk_r+0x1c>)
 800102c:	2300      	movs	r3, #0
 800102e:	4604      	mov	r4, r0
 8001030:	4608      	mov	r0, r1
 8001032:	602b      	str	r3, [r5, #0]
 8001034:	f7ff fa06 	bl	8000444 <_sbrk>
 8001038:	1c43      	adds	r3, r0, #1
 800103a:	d102      	bne.n	8001042 <_sbrk_r+0x1a>
 800103c:	682b      	ldr	r3, [r5, #0]
 800103e:	b103      	cbz	r3, 8001042 <_sbrk_r+0x1a>
 8001040:	6023      	str	r3, [r4, #0]
 8001042:	bd38      	pop	{r3, r4, r5, pc}
 8001044:	200000a4 	.word	0x200000a4

08001048 <__sread>:
 8001048:	b510      	push	{r4, lr}
 800104a:	460c      	mov	r4, r1
 800104c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001050:	f000 fab4 	bl	80015bc <_read_r>
 8001054:	2800      	cmp	r0, #0
 8001056:	bfab      	itete	ge
 8001058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800105a:	89a3      	ldrhlt	r3, [r4, #12]
 800105c:	181b      	addge	r3, r3, r0
 800105e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001062:	bfac      	ite	ge
 8001064:	6563      	strge	r3, [r4, #84]	; 0x54
 8001066:	81a3      	strhlt	r3, [r4, #12]
 8001068:	bd10      	pop	{r4, pc}

0800106a <__swrite>:
 800106a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800106e:	461f      	mov	r7, r3
 8001070:	898b      	ldrh	r3, [r1, #12]
 8001072:	05db      	lsls	r3, r3, #23
 8001074:	4605      	mov	r5, r0
 8001076:	460c      	mov	r4, r1
 8001078:	4616      	mov	r6, r2
 800107a:	d505      	bpl.n	8001088 <__swrite+0x1e>
 800107c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001080:	2302      	movs	r3, #2
 8001082:	2200      	movs	r2, #0
 8001084:	f000 f9c8 	bl	8001418 <_lseek_r>
 8001088:	89a3      	ldrh	r3, [r4, #12]
 800108a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800108e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001092:	81a3      	strh	r3, [r4, #12]
 8001094:	4632      	mov	r2, r6
 8001096:	463b      	mov	r3, r7
 8001098:	4628      	mov	r0, r5
 800109a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800109e:	f000 b869 	b.w	8001174 <_write_r>

080010a2 <__sseek>:
 80010a2:	b510      	push	{r4, lr}
 80010a4:	460c      	mov	r4, r1
 80010a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010aa:	f000 f9b5 	bl	8001418 <_lseek_r>
 80010ae:	1c43      	adds	r3, r0, #1
 80010b0:	89a3      	ldrh	r3, [r4, #12]
 80010b2:	bf15      	itete	ne
 80010b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80010b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010be:	81a3      	strheq	r3, [r4, #12]
 80010c0:	bf18      	it	ne
 80010c2:	81a3      	strhne	r3, [r4, #12]
 80010c4:	bd10      	pop	{r4, pc}

080010c6 <__sclose>:
 80010c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010ca:	f000 b8d3 	b.w	8001274 <_close_r>
	...

080010d0 <__swbuf_r>:
 80010d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010d2:	460e      	mov	r6, r1
 80010d4:	4614      	mov	r4, r2
 80010d6:	4605      	mov	r5, r0
 80010d8:	b118      	cbz	r0, 80010e2 <__swbuf_r+0x12>
 80010da:	6983      	ldr	r3, [r0, #24]
 80010dc:	b90b      	cbnz	r3, 80010e2 <__swbuf_r+0x12>
 80010de:	f7ff fbbb 	bl	8000858 <__sinit>
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <__swbuf_r+0x98>)
 80010e4:	429c      	cmp	r4, r3
 80010e6:	d12b      	bne.n	8001140 <__swbuf_r+0x70>
 80010e8:	686c      	ldr	r4, [r5, #4]
 80010ea:	69a3      	ldr	r3, [r4, #24]
 80010ec:	60a3      	str	r3, [r4, #8]
 80010ee:	89a3      	ldrh	r3, [r4, #12]
 80010f0:	071a      	lsls	r2, r3, #28
 80010f2:	d52f      	bpl.n	8001154 <__swbuf_r+0x84>
 80010f4:	6923      	ldr	r3, [r4, #16]
 80010f6:	b36b      	cbz	r3, 8001154 <__swbuf_r+0x84>
 80010f8:	6923      	ldr	r3, [r4, #16]
 80010fa:	6820      	ldr	r0, [r4, #0]
 80010fc:	1ac0      	subs	r0, r0, r3
 80010fe:	6963      	ldr	r3, [r4, #20]
 8001100:	b2f6      	uxtb	r6, r6
 8001102:	4283      	cmp	r3, r0
 8001104:	4637      	mov	r7, r6
 8001106:	dc04      	bgt.n	8001112 <__swbuf_r+0x42>
 8001108:	4621      	mov	r1, r4
 800110a:	4628      	mov	r0, r5
 800110c:	f000 f948 	bl	80013a0 <_fflush_r>
 8001110:	bb30      	cbnz	r0, 8001160 <__swbuf_r+0x90>
 8001112:	68a3      	ldr	r3, [r4, #8]
 8001114:	3b01      	subs	r3, #1
 8001116:	60a3      	str	r3, [r4, #8]
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	6022      	str	r2, [r4, #0]
 800111e:	701e      	strb	r6, [r3, #0]
 8001120:	6963      	ldr	r3, [r4, #20]
 8001122:	3001      	adds	r0, #1
 8001124:	4283      	cmp	r3, r0
 8001126:	d004      	beq.n	8001132 <__swbuf_r+0x62>
 8001128:	89a3      	ldrh	r3, [r4, #12]
 800112a:	07db      	lsls	r3, r3, #31
 800112c:	d506      	bpl.n	800113c <__swbuf_r+0x6c>
 800112e:	2e0a      	cmp	r6, #10
 8001130:	d104      	bne.n	800113c <__swbuf_r+0x6c>
 8001132:	4621      	mov	r1, r4
 8001134:	4628      	mov	r0, r5
 8001136:	f000 f933 	bl	80013a0 <_fflush_r>
 800113a:	b988      	cbnz	r0, 8001160 <__swbuf_r+0x90>
 800113c:	4638      	mov	r0, r7
 800113e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <__swbuf_r+0x9c>)
 8001142:	429c      	cmp	r4, r3
 8001144:	d101      	bne.n	800114a <__swbuf_r+0x7a>
 8001146:	68ac      	ldr	r4, [r5, #8]
 8001148:	e7cf      	b.n	80010ea <__swbuf_r+0x1a>
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <__swbuf_r+0xa0>)
 800114c:	429c      	cmp	r4, r3
 800114e:	bf08      	it	eq
 8001150:	68ec      	ldreq	r4, [r5, #12]
 8001152:	e7ca      	b.n	80010ea <__swbuf_r+0x1a>
 8001154:	4621      	mov	r1, r4
 8001156:	4628      	mov	r0, r5
 8001158:	f000 f81e 	bl	8001198 <__swsetup_r>
 800115c:	2800      	cmp	r0, #0
 800115e:	d0cb      	beq.n	80010f8 <__swbuf_r+0x28>
 8001160:	f04f 37ff 	mov.w	r7, #4294967295
 8001164:	e7ea      	b.n	800113c <__swbuf_r+0x6c>
 8001166:	bf00      	nop
 8001168:	080016c0 	.word	0x080016c0
 800116c:	080016e0 	.word	0x080016e0
 8001170:	080016a0 	.word	0x080016a0

08001174 <_write_r>:
 8001174:	b538      	push	{r3, r4, r5, lr}
 8001176:	4d07      	ldr	r5, [pc, #28]	; (8001194 <_write_r+0x20>)
 8001178:	4604      	mov	r4, r0
 800117a:	4608      	mov	r0, r1
 800117c:	4611      	mov	r1, r2
 800117e:	2200      	movs	r2, #0
 8001180:	602a      	str	r2, [r5, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	f7ff f90d 	bl	80003a2 <_write>
 8001188:	1c43      	adds	r3, r0, #1
 800118a:	d102      	bne.n	8001192 <_write_r+0x1e>
 800118c:	682b      	ldr	r3, [r5, #0]
 800118e:	b103      	cbz	r3, 8001192 <_write_r+0x1e>
 8001190:	6023      	str	r3, [r4, #0]
 8001192:	bd38      	pop	{r3, r4, r5, pc}
 8001194:	200000a4 	.word	0x200000a4

08001198 <__swsetup_r>:
 8001198:	4b32      	ldr	r3, [pc, #200]	; (8001264 <__swsetup_r+0xcc>)
 800119a:	b570      	push	{r4, r5, r6, lr}
 800119c:	681d      	ldr	r5, [r3, #0]
 800119e:	4606      	mov	r6, r0
 80011a0:	460c      	mov	r4, r1
 80011a2:	b125      	cbz	r5, 80011ae <__swsetup_r+0x16>
 80011a4:	69ab      	ldr	r3, [r5, #24]
 80011a6:	b913      	cbnz	r3, 80011ae <__swsetup_r+0x16>
 80011a8:	4628      	mov	r0, r5
 80011aa:	f7ff fb55 	bl	8000858 <__sinit>
 80011ae:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <__swsetup_r+0xd0>)
 80011b0:	429c      	cmp	r4, r3
 80011b2:	d10f      	bne.n	80011d4 <__swsetup_r+0x3c>
 80011b4:	686c      	ldr	r4, [r5, #4]
 80011b6:	89a3      	ldrh	r3, [r4, #12]
 80011b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011bc:	0719      	lsls	r1, r3, #28
 80011be:	d42c      	bmi.n	800121a <__swsetup_r+0x82>
 80011c0:	06dd      	lsls	r5, r3, #27
 80011c2:	d411      	bmi.n	80011e8 <__swsetup_r+0x50>
 80011c4:	2309      	movs	r3, #9
 80011c6:	6033      	str	r3, [r6, #0]
 80011c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80011cc:	81a3      	strh	r3, [r4, #12]
 80011ce:	f04f 30ff 	mov.w	r0, #4294967295
 80011d2:	e03e      	b.n	8001252 <__swsetup_r+0xba>
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <__swsetup_r+0xd4>)
 80011d6:	429c      	cmp	r4, r3
 80011d8:	d101      	bne.n	80011de <__swsetup_r+0x46>
 80011da:	68ac      	ldr	r4, [r5, #8]
 80011dc:	e7eb      	b.n	80011b6 <__swsetup_r+0x1e>
 80011de:	4b24      	ldr	r3, [pc, #144]	; (8001270 <__swsetup_r+0xd8>)
 80011e0:	429c      	cmp	r4, r3
 80011e2:	bf08      	it	eq
 80011e4:	68ec      	ldreq	r4, [r5, #12]
 80011e6:	e7e6      	b.n	80011b6 <__swsetup_r+0x1e>
 80011e8:	0758      	lsls	r0, r3, #29
 80011ea:	d512      	bpl.n	8001212 <__swsetup_r+0x7a>
 80011ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011ee:	b141      	cbz	r1, 8001202 <__swsetup_r+0x6a>
 80011f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011f4:	4299      	cmp	r1, r3
 80011f6:	d002      	beq.n	80011fe <__swsetup_r+0x66>
 80011f8:	4630      	mov	r0, r6
 80011fa:	f000 f98f 	bl	800151c <_free_r>
 80011fe:	2300      	movs	r3, #0
 8001200:	6363      	str	r3, [r4, #52]	; 0x34
 8001202:	89a3      	ldrh	r3, [r4, #12]
 8001204:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001208:	81a3      	strh	r3, [r4, #12]
 800120a:	2300      	movs	r3, #0
 800120c:	6063      	str	r3, [r4, #4]
 800120e:	6923      	ldr	r3, [r4, #16]
 8001210:	6023      	str	r3, [r4, #0]
 8001212:	89a3      	ldrh	r3, [r4, #12]
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	81a3      	strh	r3, [r4, #12]
 800121a:	6923      	ldr	r3, [r4, #16]
 800121c:	b94b      	cbnz	r3, 8001232 <__swsetup_r+0x9a>
 800121e:	89a3      	ldrh	r3, [r4, #12]
 8001220:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001228:	d003      	beq.n	8001232 <__swsetup_r+0x9a>
 800122a:	4621      	mov	r1, r4
 800122c:	4630      	mov	r0, r6
 800122e:	f000 f929 	bl	8001484 <__smakebuf_r>
 8001232:	89a0      	ldrh	r0, [r4, #12]
 8001234:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001238:	f010 0301 	ands.w	r3, r0, #1
 800123c:	d00a      	beq.n	8001254 <__swsetup_r+0xbc>
 800123e:	2300      	movs	r3, #0
 8001240:	60a3      	str	r3, [r4, #8]
 8001242:	6963      	ldr	r3, [r4, #20]
 8001244:	425b      	negs	r3, r3
 8001246:	61a3      	str	r3, [r4, #24]
 8001248:	6923      	ldr	r3, [r4, #16]
 800124a:	b943      	cbnz	r3, 800125e <__swsetup_r+0xc6>
 800124c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001250:	d1ba      	bne.n	80011c8 <__swsetup_r+0x30>
 8001252:	bd70      	pop	{r4, r5, r6, pc}
 8001254:	0781      	lsls	r1, r0, #30
 8001256:	bf58      	it	pl
 8001258:	6963      	ldrpl	r3, [r4, #20]
 800125a:	60a3      	str	r3, [r4, #8]
 800125c:	e7f4      	b.n	8001248 <__swsetup_r+0xb0>
 800125e:	2000      	movs	r0, #0
 8001260:	e7f7      	b.n	8001252 <__swsetup_r+0xba>
 8001262:	bf00      	nop
 8001264:	20000004 	.word	0x20000004
 8001268:	080016c0 	.word	0x080016c0
 800126c:	080016e0 	.word	0x080016e0
 8001270:	080016a0 	.word	0x080016a0

08001274 <_close_r>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	4d06      	ldr	r5, [pc, #24]	; (8001290 <_close_r+0x1c>)
 8001278:	2300      	movs	r3, #0
 800127a:	4604      	mov	r4, r0
 800127c:	4608      	mov	r0, r1
 800127e:	602b      	str	r3, [r5, #0]
 8001280:	f7ff f8ab 	bl	80003da <_close>
 8001284:	1c43      	adds	r3, r0, #1
 8001286:	d102      	bne.n	800128e <_close_r+0x1a>
 8001288:	682b      	ldr	r3, [r5, #0]
 800128a:	b103      	cbz	r3, 800128e <_close_r+0x1a>
 800128c:	6023      	str	r3, [r4, #0]
 800128e:	bd38      	pop	{r3, r4, r5, pc}
 8001290:	200000a4 	.word	0x200000a4

08001294 <__sflush_r>:
 8001294:	898a      	ldrh	r2, [r1, #12]
 8001296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800129a:	4605      	mov	r5, r0
 800129c:	0710      	lsls	r0, r2, #28
 800129e:	460c      	mov	r4, r1
 80012a0:	d458      	bmi.n	8001354 <__sflush_r+0xc0>
 80012a2:	684b      	ldr	r3, [r1, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	dc05      	bgt.n	80012b4 <__sflush_r+0x20>
 80012a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	dc02      	bgt.n	80012b4 <__sflush_r+0x20>
 80012ae:	2000      	movs	r0, #0
 80012b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012b6:	2e00      	cmp	r6, #0
 80012b8:	d0f9      	beq.n	80012ae <__sflush_r+0x1a>
 80012ba:	2300      	movs	r3, #0
 80012bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012c0:	682f      	ldr	r7, [r5, #0]
 80012c2:	602b      	str	r3, [r5, #0]
 80012c4:	d032      	beq.n	800132c <__sflush_r+0x98>
 80012c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012c8:	89a3      	ldrh	r3, [r4, #12]
 80012ca:	075a      	lsls	r2, r3, #29
 80012cc:	d505      	bpl.n	80012da <__sflush_r+0x46>
 80012ce:	6863      	ldr	r3, [r4, #4]
 80012d0:	1ac0      	subs	r0, r0, r3
 80012d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012d4:	b10b      	cbz	r3, 80012da <__sflush_r+0x46>
 80012d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012d8:	1ac0      	subs	r0, r0, r3
 80012da:	2300      	movs	r3, #0
 80012dc:	4602      	mov	r2, r0
 80012de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012e0:	6a21      	ldr	r1, [r4, #32]
 80012e2:	4628      	mov	r0, r5
 80012e4:	47b0      	blx	r6
 80012e6:	1c43      	adds	r3, r0, #1
 80012e8:	89a3      	ldrh	r3, [r4, #12]
 80012ea:	d106      	bne.n	80012fa <__sflush_r+0x66>
 80012ec:	6829      	ldr	r1, [r5, #0]
 80012ee:	291d      	cmp	r1, #29
 80012f0:	d82c      	bhi.n	800134c <__sflush_r+0xb8>
 80012f2:	4a2a      	ldr	r2, [pc, #168]	; (800139c <__sflush_r+0x108>)
 80012f4:	40ca      	lsrs	r2, r1
 80012f6:	07d6      	lsls	r6, r2, #31
 80012f8:	d528      	bpl.n	800134c <__sflush_r+0xb8>
 80012fa:	2200      	movs	r2, #0
 80012fc:	6062      	str	r2, [r4, #4]
 80012fe:	04d9      	lsls	r1, r3, #19
 8001300:	6922      	ldr	r2, [r4, #16]
 8001302:	6022      	str	r2, [r4, #0]
 8001304:	d504      	bpl.n	8001310 <__sflush_r+0x7c>
 8001306:	1c42      	adds	r2, r0, #1
 8001308:	d101      	bne.n	800130e <__sflush_r+0x7a>
 800130a:	682b      	ldr	r3, [r5, #0]
 800130c:	b903      	cbnz	r3, 8001310 <__sflush_r+0x7c>
 800130e:	6560      	str	r0, [r4, #84]	; 0x54
 8001310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001312:	602f      	str	r7, [r5, #0]
 8001314:	2900      	cmp	r1, #0
 8001316:	d0ca      	beq.n	80012ae <__sflush_r+0x1a>
 8001318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800131c:	4299      	cmp	r1, r3
 800131e:	d002      	beq.n	8001326 <__sflush_r+0x92>
 8001320:	4628      	mov	r0, r5
 8001322:	f000 f8fb 	bl	800151c <_free_r>
 8001326:	2000      	movs	r0, #0
 8001328:	6360      	str	r0, [r4, #52]	; 0x34
 800132a:	e7c1      	b.n	80012b0 <__sflush_r+0x1c>
 800132c:	6a21      	ldr	r1, [r4, #32]
 800132e:	2301      	movs	r3, #1
 8001330:	4628      	mov	r0, r5
 8001332:	47b0      	blx	r6
 8001334:	1c41      	adds	r1, r0, #1
 8001336:	d1c7      	bne.n	80012c8 <__sflush_r+0x34>
 8001338:	682b      	ldr	r3, [r5, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0c4      	beq.n	80012c8 <__sflush_r+0x34>
 800133e:	2b1d      	cmp	r3, #29
 8001340:	d001      	beq.n	8001346 <__sflush_r+0xb2>
 8001342:	2b16      	cmp	r3, #22
 8001344:	d101      	bne.n	800134a <__sflush_r+0xb6>
 8001346:	602f      	str	r7, [r5, #0]
 8001348:	e7b1      	b.n	80012ae <__sflush_r+0x1a>
 800134a:	89a3      	ldrh	r3, [r4, #12]
 800134c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001350:	81a3      	strh	r3, [r4, #12]
 8001352:	e7ad      	b.n	80012b0 <__sflush_r+0x1c>
 8001354:	690f      	ldr	r7, [r1, #16]
 8001356:	2f00      	cmp	r7, #0
 8001358:	d0a9      	beq.n	80012ae <__sflush_r+0x1a>
 800135a:	0793      	lsls	r3, r2, #30
 800135c:	680e      	ldr	r6, [r1, #0]
 800135e:	bf08      	it	eq
 8001360:	694b      	ldreq	r3, [r1, #20]
 8001362:	600f      	str	r7, [r1, #0]
 8001364:	bf18      	it	ne
 8001366:	2300      	movne	r3, #0
 8001368:	eba6 0807 	sub.w	r8, r6, r7
 800136c:	608b      	str	r3, [r1, #8]
 800136e:	f1b8 0f00 	cmp.w	r8, #0
 8001372:	dd9c      	ble.n	80012ae <__sflush_r+0x1a>
 8001374:	6a21      	ldr	r1, [r4, #32]
 8001376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001378:	4643      	mov	r3, r8
 800137a:	463a      	mov	r2, r7
 800137c:	4628      	mov	r0, r5
 800137e:	47b0      	blx	r6
 8001380:	2800      	cmp	r0, #0
 8001382:	dc06      	bgt.n	8001392 <__sflush_r+0xfe>
 8001384:	89a3      	ldrh	r3, [r4, #12]
 8001386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800138a:	81a3      	strh	r3, [r4, #12]
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	e78e      	b.n	80012b0 <__sflush_r+0x1c>
 8001392:	4407      	add	r7, r0
 8001394:	eba8 0800 	sub.w	r8, r8, r0
 8001398:	e7e9      	b.n	800136e <__sflush_r+0xda>
 800139a:	bf00      	nop
 800139c:	20400001 	.word	0x20400001

080013a0 <_fflush_r>:
 80013a0:	b538      	push	{r3, r4, r5, lr}
 80013a2:	690b      	ldr	r3, [r1, #16]
 80013a4:	4605      	mov	r5, r0
 80013a6:	460c      	mov	r4, r1
 80013a8:	b913      	cbnz	r3, 80013b0 <_fflush_r+0x10>
 80013aa:	2500      	movs	r5, #0
 80013ac:	4628      	mov	r0, r5
 80013ae:	bd38      	pop	{r3, r4, r5, pc}
 80013b0:	b118      	cbz	r0, 80013ba <_fflush_r+0x1a>
 80013b2:	6983      	ldr	r3, [r0, #24]
 80013b4:	b90b      	cbnz	r3, 80013ba <_fflush_r+0x1a>
 80013b6:	f7ff fa4f 	bl	8000858 <__sinit>
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <_fflush_r+0x6c>)
 80013bc:	429c      	cmp	r4, r3
 80013be:	d11b      	bne.n	80013f8 <_fflush_r+0x58>
 80013c0:	686c      	ldr	r4, [r5, #4]
 80013c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0ef      	beq.n	80013aa <_fflush_r+0xa>
 80013ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013cc:	07d0      	lsls	r0, r2, #31
 80013ce:	d404      	bmi.n	80013da <_fflush_r+0x3a>
 80013d0:	0599      	lsls	r1, r3, #22
 80013d2:	d402      	bmi.n	80013da <_fflush_r+0x3a>
 80013d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013d6:	f7ff fadd 	bl	8000994 <__retarget_lock_acquire_recursive>
 80013da:	4628      	mov	r0, r5
 80013dc:	4621      	mov	r1, r4
 80013de:	f7ff ff59 	bl	8001294 <__sflush_r>
 80013e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013e4:	07da      	lsls	r2, r3, #31
 80013e6:	4605      	mov	r5, r0
 80013e8:	d4e0      	bmi.n	80013ac <_fflush_r+0xc>
 80013ea:	89a3      	ldrh	r3, [r4, #12]
 80013ec:	059b      	lsls	r3, r3, #22
 80013ee:	d4dd      	bmi.n	80013ac <_fflush_r+0xc>
 80013f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013f2:	f7ff fad0 	bl	8000996 <__retarget_lock_release_recursive>
 80013f6:	e7d9      	b.n	80013ac <_fflush_r+0xc>
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <_fflush_r+0x70>)
 80013fa:	429c      	cmp	r4, r3
 80013fc:	d101      	bne.n	8001402 <_fflush_r+0x62>
 80013fe:	68ac      	ldr	r4, [r5, #8]
 8001400:	e7df      	b.n	80013c2 <_fflush_r+0x22>
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <_fflush_r+0x74>)
 8001404:	429c      	cmp	r4, r3
 8001406:	bf08      	it	eq
 8001408:	68ec      	ldreq	r4, [r5, #12]
 800140a:	e7da      	b.n	80013c2 <_fflush_r+0x22>
 800140c:	080016c0 	.word	0x080016c0
 8001410:	080016e0 	.word	0x080016e0
 8001414:	080016a0 	.word	0x080016a0

08001418 <_lseek_r>:
 8001418:	b538      	push	{r3, r4, r5, lr}
 800141a:	4d07      	ldr	r5, [pc, #28]	; (8001438 <_lseek_r+0x20>)
 800141c:	4604      	mov	r4, r0
 800141e:	4608      	mov	r0, r1
 8001420:	4611      	mov	r1, r2
 8001422:	2200      	movs	r2, #0
 8001424:	602a      	str	r2, [r5, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	f7fe fffe 	bl	8000428 <_lseek>
 800142c:	1c43      	adds	r3, r0, #1
 800142e:	d102      	bne.n	8001436 <_lseek_r+0x1e>
 8001430:	682b      	ldr	r3, [r5, #0]
 8001432:	b103      	cbz	r3, 8001436 <_lseek_r+0x1e>
 8001434:	6023      	str	r3, [r4, #0]
 8001436:	bd38      	pop	{r3, r4, r5, pc}
 8001438:	200000a4 	.word	0x200000a4

0800143c <__swhatbuf_r>:
 800143c:	b570      	push	{r4, r5, r6, lr}
 800143e:	460e      	mov	r6, r1
 8001440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001444:	2900      	cmp	r1, #0
 8001446:	b096      	sub	sp, #88	; 0x58
 8001448:	4614      	mov	r4, r2
 800144a:	461d      	mov	r5, r3
 800144c:	da07      	bge.n	800145e <__swhatbuf_r+0x22>
 800144e:	2300      	movs	r3, #0
 8001450:	602b      	str	r3, [r5, #0]
 8001452:	89b3      	ldrh	r3, [r6, #12]
 8001454:	061a      	lsls	r2, r3, #24
 8001456:	d410      	bmi.n	800147a <__swhatbuf_r+0x3e>
 8001458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800145c:	e00e      	b.n	800147c <__swhatbuf_r+0x40>
 800145e:	466a      	mov	r2, sp
 8001460:	f000 f8be 	bl	80015e0 <_fstat_r>
 8001464:	2800      	cmp	r0, #0
 8001466:	dbf2      	blt.n	800144e <__swhatbuf_r+0x12>
 8001468:	9a01      	ldr	r2, [sp, #4]
 800146a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800146e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001472:	425a      	negs	r2, r3
 8001474:	415a      	adcs	r2, r3
 8001476:	602a      	str	r2, [r5, #0]
 8001478:	e7ee      	b.n	8001458 <__swhatbuf_r+0x1c>
 800147a:	2340      	movs	r3, #64	; 0x40
 800147c:	2000      	movs	r0, #0
 800147e:	6023      	str	r3, [r4, #0]
 8001480:	b016      	add	sp, #88	; 0x58
 8001482:	bd70      	pop	{r4, r5, r6, pc}

08001484 <__smakebuf_r>:
 8001484:	898b      	ldrh	r3, [r1, #12]
 8001486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001488:	079d      	lsls	r5, r3, #30
 800148a:	4606      	mov	r6, r0
 800148c:	460c      	mov	r4, r1
 800148e:	d507      	bpl.n	80014a0 <__smakebuf_r+0x1c>
 8001490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001494:	6023      	str	r3, [r4, #0]
 8001496:	6123      	str	r3, [r4, #16]
 8001498:	2301      	movs	r3, #1
 800149a:	6163      	str	r3, [r4, #20]
 800149c:	b002      	add	sp, #8
 800149e:	bd70      	pop	{r4, r5, r6, pc}
 80014a0:	ab01      	add	r3, sp, #4
 80014a2:	466a      	mov	r2, sp
 80014a4:	f7ff ffca 	bl	800143c <__swhatbuf_r>
 80014a8:	9900      	ldr	r1, [sp, #0]
 80014aa:	4605      	mov	r5, r0
 80014ac:	4630      	mov	r0, r6
 80014ae:	f7ff fa73 	bl	8000998 <_malloc_r>
 80014b2:	b948      	cbnz	r0, 80014c8 <__smakebuf_r+0x44>
 80014b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014b8:	059a      	lsls	r2, r3, #22
 80014ba:	d4ef      	bmi.n	800149c <__smakebuf_r+0x18>
 80014bc:	f023 0303 	bic.w	r3, r3, #3
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	81a3      	strh	r3, [r4, #12]
 80014c6:	e7e3      	b.n	8001490 <__smakebuf_r+0xc>
 80014c8:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <__smakebuf_r+0x7c>)
 80014ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80014cc:	89a3      	ldrh	r3, [r4, #12]
 80014ce:	6020      	str	r0, [r4, #0]
 80014d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d4:	81a3      	strh	r3, [r4, #12]
 80014d6:	9b00      	ldr	r3, [sp, #0]
 80014d8:	6163      	str	r3, [r4, #20]
 80014da:	9b01      	ldr	r3, [sp, #4]
 80014dc:	6120      	str	r0, [r4, #16]
 80014de:	b15b      	cbz	r3, 80014f8 <__smakebuf_r+0x74>
 80014e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014e4:	4630      	mov	r0, r6
 80014e6:	f000 f88d 	bl	8001604 <_isatty_r>
 80014ea:	b128      	cbz	r0, 80014f8 <__smakebuf_r+0x74>
 80014ec:	89a3      	ldrh	r3, [r4, #12]
 80014ee:	f023 0303 	bic.w	r3, r3, #3
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	81a3      	strh	r3, [r4, #12]
 80014f8:	89a0      	ldrh	r0, [r4, #12]
 80014fa:	4305      	orrs	r5, r0
 80014fc:	81a5      	strh	r5, [r4, #12]
 80014fe:	e7cd      	b.n	800149c <__smakebuf_r+0x18>
 8001500:	080007f1 	.word	0x080007f1

08001504 <__malloc_lock>:
 8001504:	4801      	ldr	r0, [pc, #4]	; (800150c <__malloc_lock+0x8>)
 8001506:	f7ff ba45 	b.w	8000994 <__retarget_lock_acquire_recursive>
 800150a:	bf00      	nop
 800150c:	2000009c 	.word	0x2000009c

08001510 <__malloc_unlock>:
 8001510:	4801      	ldr	r0, [pc, #4]	; (8001518 <__malloc_unlock+0x8>)
 8001512:	f7ff ba40 	b.w	8000996 <__retarget_lock_release_recursive>
 8001516:	bf00      	nop
 8001518:	2000009c 	.word	0x2000009c

0800151c <_free_r>:
 800151c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800151e:	2900      	cmp	r1, #0
 8001520:	d048      	beq.n	80015b4 <_free_r+0x98>
 8001522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001526:	9001      	str	r0, [sp, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	f1a1 0404 	sub.w	r4, r1, #4
 800152e:	bfb8      	it	lt
 8001530:	18e4      	addlt	r4, r4, r3
 8001532:	f7ff ffe7 	bl	8001504 <__malloc_lock>
 8001536:	4a20      	ldr	r2, [pc, #128]	; (80015b8 <_free_r+0x9c>)
 8001538:	9801      	ldr	r0, [sp, #4]
 800153a:	6813      	ldr	r3, [r2, #0]
 800153c:	4615      	mov	r5, r2
 800153e:	b933      	cbnz	r3, 800154e <_free_r+0x32>
 8001540:	6063      	str	r3, [r4, #4]
 8001542:	6014      	str	r4, [r2, #0]
 8001544:	b003      	add	sp, #12
 8001546:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800154a:	f7ff bfe1 	b.w	8001510 <__malloc_unlock>
 800154e:	42a3      	cmp	r3, r4
 8001550:	d90b      	bls.n	800156a <_free_r+0x4e>
 8001552:	6821      	ldr	r1, [r4, #0]
 8001554:	1862      	adds	r2, r4, r1
 8001556:	4293      	cmp	r3, r2
 8001558:	bf04      	itt	eq
 800155a:	681a      	ldreq	r2, [r3, #0]
 800155c:	685b      	ldreq	r3, [r3, #4]
 800155e:	6063      	str	r3, [r4, #4]
 8001560:	bf04      	itt	eq
 8001562:	1852      	addeq	r2, r2, r1
 8001564:	6022      	streq	r2, [r4, #0]
 8001566:	602c      	str	r4, [r5, #0]
 8001568:	e7ec      	b.n	8001544 <_free_r+0x28>
 800156a:	461a      	mov	r2, r3
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	b10b      	cbz	r3, 8001574 <_free_r+0x58>
 8001570:	42a3      	cmp	r3, r4
 8001572:	d9fa      	bls.n	800156a <_free_r+0x4e>
 8001574:	6811      	ldr	r1, [r2, #0]
 8001576:	1855      	adds	r5, r2, r1
 8001578:	42a5      	cmp	r5, r4
 800157a:	d10b      	bne.n	8001594 <_free_r+0x78>
 800157c:	6824      	ldr	r4, [r4, #0]
 800157e:	4421      	add	r1, r4
 8001580:	1854      	adds	r4, r2, r1
 8001582:	42a3      	cmp	r3, r4
 8001584:	6011      	str	r1, [r2, #0]
 8001586:	d1dd      	bne.n	8001544 <_free_r+0x28>
 8001588:	681c      	ldr	r4, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	6053      	str	r3, [r2, #4]
 800158e:	4421      	add	r1, r4
 8001590:	6011      	str	r1, [r2, #0]
 8001592:	e7d7      	b.n	8001544 <_free_r+0x28>
 8001594:	d902      	bls.n	800159c <_free_r+0x80>
 8001596:	230c      	movs	r3, #12
 8001598:	6003      	str	r3, [r0, #0]
 800159a:	e7d3      	b.n	8001544 <_free_r+0x28>
 800159c:	6825      	ldr	r5, [r4, #0]
 800159e:	1961      	adds	r1, r4, r5
 80015a0:	428b      	cmp	r3, r1
 80015a2:	bf04      	itt	eq
 80015a4:	6819      	ldreq	r1, [r3, #0]
 80015a6:	685b      	ldreq	r3, [r3, #4]
 80015a8:	6063      	str	r3, [r4, #4]
 80015aa:	bf04      	itt	eq
 80015ac:	1949      	addeq	r1, r1, r5
 80015ae:	6021      	streq	r1, [r4, #0]
 80015b0:	6054      	str	r4, [r2, #4]
 80015b2:	e7c7      	b.n	8001544 <_free_r+0x28>
 80015b4:	b003      	add	sp, #12
 80015b6:	bd30      	pop	{r4, r5, pc}
 80015b8:	20000088 	.word	0x20000088

080015bc <_read_r>:
 80015bc:	b538      	push	{r3, r4, r5, lr}
 80015be:	4d07      	ldr	r5, [pc, #28]	; (80015dc <_read_r+0x20>)
 80015c0:	4604      	mov	r4, r0
 80015c2:	4608      	mov	r0, r1
 80015c4:	4611      	mov	r1, r2
 80015c6:	2200      	movs	r2, #0
 80015c8:	602a      	str	r2, [r5, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	f7fe fecc 	bl	8000368 <_read>
 80015d0:	1c43      	adds	r3, r0, #1
 80015d2:	d102      	bne.n	80015da <_read_r+0x1e>
 80015d4:	682b      	ldr	r3, [r5, #0]
 80015d6:	b103      	cbz	r3, 80015da <_read_r+0x1e>
 80015d8:	6023      	str	r3, [r4, #0]
 80015da:	bd38      	pop	{r3, r4, r5, pc}
 80015dc:	200000a4 	.word	0x200000a4

080015e0 <_fstat_r>:
 80015e0:	b538      	push	{r3, r4, r5, lr}
 80015e2:	4d07      	ldr	r5, [pc, #28]	; (8001600 <_fstat_r+0x20>)
 80015e4:	2300      	movs	r3, #0
 80015e6:	4604      	mov	r4, r0
 80015e8:	4608      	mov	r0, r1
 80015ea:	4611      	mov	r1, r2
 80015ec:	602b      	str	r3, [r5, #0]
 80015ee:	f7fe ff00 	bl	80003f2 <_fstat>
 80015f2:	1c43      	adds	r3, r0, #1
 80015f4:	d102      	bne.n	80015fc <_fstat_r+0x1c>
 80015f6:	682b      	ldr	r3, [r5, #0]
 80015f8:	b103      	cbz	r3, 80015fc <_fstat_r+0x1c>
 80015fa:	6023      	str	r3, [r4, #0]
 80015fc:	bd38      	pop	{r3, r4, r5, pc}
 80015fe:	bf00      	nop
 8001600:	200000a4 	.word	0x200000a4

08001604 <_isatty_r>:
 8001604:	b538      	push	{r3, r4, r5, lr}
 8001606:	4d06      	ldr	r5, [pc, #24]	; (8001620 <_isatty_r+0x1c>)
 8001608:	2300      	movs	r3, #0
 800160a:	4604      	mov	r4, r0
 800160c:	4608      	mov	r0, r1
 800160e:	602b      	str	r3, [r5, #0]
 8001610:	f7fe feff 	bl	8000412 <_isatty>
 8001614:	1c43      	adds	r3, r0, #1
 8001616:	d102      	bne.n	800161e <_isatty_r+0x1a>
 8001618:	682b      	ldr	r3, [r5, #0]
 800161a:	b103      	cbz	r3, 800161e <_isatty_r+0x1a>
 800161c:	6023      	str	r3, [r4, #0]
 800161e:	bd38      	pop	{r3, r4, r5, pc}
 8001620:	200000a4 	.word	0x200000a4

08001624 <_init>:
 8001624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001626:	bf00      	nop
 8001628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800162a:	bc08      	pop	{r3}
 800162c:	469e      	mov	lr, r3
 800162e:	4770      	bx	lr

08001630 <_fini>:
 8001630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001632:	bf00      	nop
 8001634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001636:	bc08      	pop	{r3}
 8001638:	469e      	mov	lr, r3
 800163a:	4770      	bx	lr
