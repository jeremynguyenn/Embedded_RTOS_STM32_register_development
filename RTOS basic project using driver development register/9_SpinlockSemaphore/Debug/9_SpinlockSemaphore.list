
9_SpinlockSemaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08001970  08001970  00011970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a68  08001a68  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001a68  08001a68  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a68  08001a68  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a68  08001a68  00011a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a6c  08001a6c  00011a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001338  20000064  08001ad4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000139c  08001ad4  0002139c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000407e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b0e  00000000  00000000  00024112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  00024c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c8  00000000  00000000  00024e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002546  00000000  00000000  00025008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000024fe  00000000  00000000  0002754e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000559ee  00000000  00000000  00029a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007f43a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ecc  00000000  00000000  0007f490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001958 	.word	0x08001958

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001958 	.word	0x08001958

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <task3>:
void valve_close(void);



void task3(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	pTask1_Profiler++;
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <task3+0x18>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	3301      	adds	r3, #1
 800028a:	4a03      	ldr	r2, [pc, #12]	; (8000298 <task3+0x18>)
 800028c:	6013      	str	r3, [r2, #0]
}
 800028e:	bf00      	nop
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	200000a0 	.word	0x200000a0

0800029c <task0>:

void task0(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	while(1)
	{
		Task0_Profiler++;
 80002a0:	4b02      	ldr	r3, [pc, #8]	; (80002ac <task0+0x10>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	3301      	adds	r3, #1
 80002a6:	4a01      	ldr	r2, [pc, #4]	; (80002ac <task0+0x10>)
 80002a8:	6013      	str	r3, [r2, #0]
 80002aa:	e7f9      	b.n	80002a0 <task0+0x4>
 80002ac:	200000a4 	.word	0x200000a4

080002b0 <task1>:
	}
}


void task1(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	while(1)
	{
		//osSemaphoreWait(&semaphore1);
		motor_run();
 80002b4:	f000 f842 	bl	800033c <motor_run>
 80002b8:	e7fc      	b.n	80002b4 <task1+0x4>

080002ba <task2>:

	}
}

void task2(void)
{
 80002ba:	b580      	push	{r7, lr}
 80002bc:	af00      	add	r7, sp, #0
	while(1)
	{
		//osSemaphoreWait(&semaphore2);
		valve_open();
 80002be:	f000 f847 	bl	8000350 <valve_open>
 80002c2:	e7fc      	b.n	80002be <task2+0x4>

080002c4 <main>:

	}
}

int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0

    /*Initialize uart*/
	uart_tx_init();
 80002c8:	f000 fb0a 	bl	80008e0 <uart_tx_init>

    /*Initializr hardware timer*/
	tim2_1hz_interrupt_init();
 80002cc:	f000 fa20 	bl	8000710 <tim2_1hz_interrupt_init>

	/*Initialize semaphores*/
	osSemaphoreInit(&semaphore1,1);
 80002d0:	2101      	movs	r1, #1
 80002d2:	480a      	ldr	r0, [pc, #40]	; (80002fc <main+0x38>)
 80002d4:	f000 fa46 	bl	8000764 <osSemaphoreInit>
	osSemaphoreInit(&semaphore2,0);
 80002d8:	2100      	movs	r1, #0
 80002da:	4809      	ldr	r0, [pc, #36]	; (8000300 <main+0x3c>)
 80002dc:	f000 fa42 	bl	8000764 <osSemaphoreInit>


	/*Initialize Kernel*/
	osKernelInit();
 80002e0:	f000 f994 	bl	800060c <osKernelInit>

	/*Add Threads*/
	osKernelAddThreads(&task0,&task1,&task2);
 80002e4:	4a07      	ldr	r2, [pc, #28]	; (8000304 <main+0x40>)
 80002e6:	4908      	ldr	r1, [pc, #32]	; (8000308 <main+0x44>)
 80002e8:	4808      	ldr	r0, [pc, #32]	; (800030c <main+0x48>)
 80002ea:	f000 f953 	bl	8000594 <osKernelAddThreads>

	/*Set RoundRobin time quanta*/
	osKernelLaunch(QUANTA);
 80002ee:	2002      	movs	r0, #2
 80002f0:	f000 f99a 	bl	8000628 <osKernelLaunch>
 80002f4:	2300      	movs	r3, #0


}
 80002f6:	4618      	mov	r0, r3
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000090 	.word	0x20000090
 8000300:	2000009c 	.word	0x2000009c
 8000304:	080002bb 	.word	0x080002bb
 8000308:	080002b1 	.word	0x080002b1
 800030c:	0800029d 	.word	0x0800029d

08000310 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0

	/*Clear update interrupt flag*/
	TIM2->SR &=~SR_UIF;
 8000314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000318:	691b      	ldr	r3, [r3, #16]
 800031a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800031e:	f023 0301 	bic.w	r3, r3, #1
 8000322:	6113      	str	r3, [r2, #16]

	/*Do something*/
	pTask2_Profiler++;
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <TIM2_IRQHandler+0x28>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	3301      	adds	r3, #1
 800032a:	4a03      	ldr	r2, [pc, #12]	; (8000338 <TIM2_IRQHandler+0x28>)
 800032c:	6013      	str	r3, [r2, #0]
}
 800032e:	bf00      	nop
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	2000008c 	.word	0x2000008c

0800033c <motor_run>:

void motor_run(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	printf("Motor is starting...\n\r");
 8000340:	4802      	ldr	r0, [pc, #8]	; (800034c <motor_run+0x10>)
 8000342:	f000 fbb3 	bl	8000aac <iprintf>

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	08001970 	.word	0x08001970

08000350 <valve_open>:
	printf("Motor is stopping...\n\r");
}

void valve_open(void)

{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	printf("Valve is opening...\n\r");
 8000354:	4802      	ldr	r0, [pc, #8]	; (8000360 <valve_open+0x10>)
 8000356:	f000 fba9 	bl	8000aac <iprintf>
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	080019a0 	.word	0x080019a0

08000364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800036e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000372:	2b00      	cmp	r3, #0
 8000374:	db0b      	blt.n	800038e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	f003 021f 	and.w	r2, r3, #31
 800037c:	4907      	ldr	r1, [pc, #28]	; (800039c <__NVIC_EnableIRQ+0x38>)
 800037e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000382:	095b      	lsrs	r3, r3, #5
 8000384:	2001      	movs	r0, #1
 8000386:	fa00 f202 	lsl.w	r2, r0, r2
 800038a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	e000e100 	.word	0xe000e100

080003a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	6039      	str	r1, [r7, #0]
 80003aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	db0a      	blt.n	80003ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	490c      	ldr	r1, [pc, #48]	; (80003ec <__NVIC_SetPriority+0x4c>)
 80003ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003be:	0112      	lsls	r2, r2, #4
 80003c0:	b2d2      	uxtb	r2, r2
 80003c2:	440b      	add	r3, r1
 80003c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003c8:	e00a      	b.n	80003e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4908      	ldr	r1, [pc, #32]	; (80003f0 <__NVIC_SetPriority+0x50>)
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	f003 030f 	and.w	r3, r3, #15
 80003d6:	3b04      	subs	r3, #4
 80003d8:	0112      	lsls	r2, r2, #4
 80003da:	b2d2      	uxtb	r2, r2
 80003dc:	440b      	add	r3, r1
 80003de:	761a      	strb	r2, [r3, #24]
}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	e000e100 	.word	0xe000e100
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <osKernelStackInit>:
/*Each thread will have stacksize of 100 i.e. 400bytes*/
int32_t TCB_STACK[NUM_OF_THREADS][STACKSIZE];


void osKernelStackInit(int i)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	tcbs[i].stackPt =  &TCB_STACK[i][STACKSIZE - 16]; /*Stack Pointer*/
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000402:	fb02 f303 	mul.w	r3, r2, r3
 8000406:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800040a:	4a60      	ldr	r2, [pc, #384]	; (800058c <osKernelStackInit+0x198>)
 800040c:	441a      	add	r2, r3
 800040e:	4960      	ldr	r1, [pc, #384]	; (8000590 <osKernelStackInit+0x19c>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

	/*Set bit21 (T-bit) in PSR to 1, to operate in
	 * Thumb mode*/
	TCB_STACK[i][STACKSIZE - 1] =  (1U<<24); /*PSR*/
 8000416:	4a5d      	ldr	r2, [pc, #372]	; (800058c <osKernelStackInit+0x198>)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800041e:	fb01 f303 	mul.w	r3, r1, r3
 8000422:	4413      	add	r3, r2
 8000424:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8000428:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800042c:	601a      	str	r2, [r3, #0]


  /**@Note : Block below is optional, for debugging purpose only*/
  /**Dummy stack content*/
	TCB_STACK[i][STACKSIZE-3]  = 0xAAAAAAAA;    /*R14 i.e LR*/
 800042e:	4a57      	ldr	r2, [pc, #348]	; (800058c <osKernelStackInit+0x198>)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000436:	fb01 f303 	mul.w	r3, r1, r3
 800043a:	4413      	add	r3, r2
 800043c:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8000440:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000444:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-4]  = 0xAAAAAAAA;    /*R12*/
 8000446:	4a51      	ldr	r2, [pc, #324]	; (800058c <osKernelStackInit+0x198>)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800044e:	fb01 f303 	mul.w	r3, r1, r3
 8000452:	4413      	add	r3, r2
 8000454:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 8000458:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800045c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-5]  = 0xAAAAAAAA;    /*R3*/
 800045e:	4a4b      	ldr	r2, [pc, #300]	; (800058c <osKernelStackInit+0x198>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000466:	fb01 f303 	mul.w	r3, r1, r3
 800046a:	4413      	add	r3, r2
 800046c:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8000470:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000474:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-6]  = 0xAAAAAAAA;    /*R2*/
 8000476:	4a45      	ldr	r2, [pc, #276]	; (800058c <osKernelStackInit+0x198>)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800047e:	fb01 f303 	mul.w	r3, r1, r3
 8000482:	4413      	add	r3, r2
 8000484:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 8000488:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800048c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-7]  = 0xAAAAAAAA;    /*R1*/
 800048e:	4a3f      	ldr	r2, [pc, #252]	; (800058c <osKernelStackInit+0x198>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000496:	fb01 f303 	mul.w	r3, r1, r3
 800049a:	4413      	add	r3, r2
 800049c:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80004a0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80004a4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-8]  = 0xAAAAAAAA;    /*R0*/
 80004a6:	4a39      	ldr	r2, [pc, #228]	; (800058c <osKernelStackInit+0x198>)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80004ae:	fb01 f303 	mul.w	r3, r1, r3
 80004b2:	4413      	add	r3, r2
 80004b4:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 80004b8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80004bc:	601a      	str	r2, [r3, #0]

	TCB_STACK[i][STACKSIZE-9]  = 0xAAAAAAAA;    /*R11*/
 80004be:	4a33      	ldr	r2, [pc, #204]	; (800058c <osKernelStackInit+0x198>)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80004c6:	fb01 f303 	mul.w	r3, r1, r3
 80004ca:	4413      	add	r3, r2
 80004cc:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80004d0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80004d4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-10] = 0xAAAAAAAA;   /*R10*/
 80004d6:	4a2d      	ldr	r2, [pc, #180]	; (800058c <osKernelStackInit+0x198>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80004de:	fb01 f303 	mul.w	r3, r1, r3
 80004e2:	4413      	add	r3, r2
 80004e4:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 80004e8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80004ec:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-11] = 0xAAAAAAAA;   /*R9*/
 80004ee:	4a27      	ldr	r2, [pc, #156]	; (800058c <osKernelStackInit+0x198>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80004f6:	fb01 f303 	mul.w	r3, r1, r3
 80004fa:	4413      	add	r3, r2
 80004fc:	f203 6314 	addw	r3, r3, #1556	; 0x614
 8000500:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000504:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-12] = 0xAAAAAAAA;   /*R8*/
 8000506:	4a21      	ldr	r2, [pc, #132]	; (800058c <osKernelStackInit+0x198>)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800050e:	fb01 f303 	mul.w	r3, r1, r3
 8000512:	4413      	add	r3, r2
 8000514:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8000518:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800051c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-13] = 0xAAAAAAAA;   /*R7*/
 800051e:	4a1b      	ldr	r2, [pc, #108]	; (800058c <osKernelStackInit+0x198>)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000526:	fb01 f303 	mul.w	r3, r1, r3
 800052a:	4413      	add	r3, r2
 800052c:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8000530:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000534:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-14] = 0xAAAAAAAA;   /*R6*/
 8000536:	4a15      	ldr	r2, [pc, #84]	; (800058c <osKernelStackInit+0x198>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800053e:	fb01 f303 	mul.w	r3, r1, r3
 8000542:	4413      	add	r3, r2
 8000544:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8000548:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800054c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-15] = 0xAAAAAAAA;   /*R5*/
 800054e:	4a0f      	ldr	r2, [pc, #60]	; (800058c <osKernelStackInit+0x198>)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000556:	fb01 f303 	mul.w	r3, r1, r3
 800055a:	4413      	add	r3, r2
 800055c:	f203 6304 	addw	r3, r3, #1540	; 0x604
 8000560:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000564:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE-16] = 0xAAAAAAAA;   /*R4*/
 8000566:	4a09      	ldr	r2, [pc, #36]	; (800058c <osKernelStackInit+0x198>)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800056e:	fb01 f303 	mul.w	r3, r1, r3
 8000572:	4413      	add	r3, r2
 8000574:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000578:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800057c:	601a      	str	r2, [r3, #0]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	200000cc 	.word	0x200000cc
 8000590:	200000b0 	.word	0x200000b0

08000594 <osKernelAddThreads>:


uint8_t osKernelAddThreads(void(*task0)(void),void(*task1)(void),void(*task2)(void))
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
}
 80005a2:	bf00      	nop
	/*Disable global interrupts*/
	__disable_irq();
	tcbs[0].nextPt =  &tcbs[1];
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <osKernelAddThreads+0x64>)
 80005a6:	4a15      	ldr	r2, [pc, #84]	; (80005fc <osKernelAddThreads+0x68>)
 80005a8:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt =  &tcbs[2];
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <osKernelAddThreads+0x64>)
 80005ac:	4a14      	ldr	r2, [pc, #80]	; (8000600 <osKernelAddThreads+0x6c>)
 80005ae:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt =  &tcbs[0];
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <osKernelAddThreads+0x64>)
 80005b2:	4a11      	ldr	r2, [pc, #68]	; (80005f8 <osKernelAddThreads+0x64>)
 80005b4:	615a      	str	r2, [r3, #20]

	/*Initial stack for thread0*/
	osKernelStackInit(0);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff ff1c 	bl	80003f4 <osKernelStackInit>
	/*Initial PC*/
	TCB_STACK[0][STACKSIZE - 2] =  (int32_t)(task0);
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4a11      	ldr	r2, [pc, #68]	; (8000604 <osKernelAddThreads+0x70>)
 80005c0:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638

	/*Initial stack for thread1*/
	osKernelStackInit(1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f7ff ff15 	bl	80003f4 <osKernelStackInit>
	/*Initial PC*/
	TCB_STACK[1][STACKSIZE - 2] =  (int32_t)(task1);
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <osKernelAddThreads+0x70>)
 80005ce:	f8c2 3c78 	str.w	r3, [r2, #3192]	; 0xc78


	/*Initial stack for thread2*/
	osKernelStackInit(2);
 80005d2:	2002      	movs	r0, #2
 80005d4:	f7ff ff0e 	bl	80003f4 <osKernelStackInit>
	/*Initial PC*/
	TCB_STACK[2][STACKSIZE - 2] =  (int32_t)(task2);
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <osKernelAddThreads+0x70>)
 80005dc:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
 80005e0:	3318      	adds	r3, #24
 80005e2:	601a      	str	r2, [r3, #0]

	/*Start from thread0*/
	currentPt  = &tcbs[0];
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <osKernelAddThreads+0x74>)
 80005e6:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <osKernelAddThreads+0x64>)
 80005e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80005ea:	b662      	cpsie	i
}
 80005ec:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();

	return 1;
 80005ee:	2301      	movs	r3, #1
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	200000b0 	.word	0x200000b0
 80005fc:	200000b8 	.word	0x200000b8
 8000600:	200000c0 	.word	0x200000c0
 8000604:	200000cc 	.word	0x200000cc
 8000608:	200000ac 	.word	0x200000ac

0800060c <osKernelInit>:


void osKernelInit(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER  = (BUS_FREQ/1000);
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <osKernelInit+0x18>)
 8000612:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000616:	601a      	str	r2, [r3, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	200000c8 	.word	0x200000c8

08000628 <osKernelLaunch>:


void osKernelLaunch(uint32_t quanta)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	/*Reset systick*/
	SysTick->CTRL = SYSTICK_RST;
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <osKernelLaunch+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]

	/*Clear systick current value register*/
	SysTick->VAL = 0;
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <osKernelLaunch+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]

	/*Load quanta*/
	SysTick->LOAD =  (quanta * MILLIS_PRESCALER) - 1;
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <osKernelLaunch+0x50>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	fb02 f303 	mul.w	r3, r2, r3
 8000646:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <osKernelLaunch+0x4c>)
 8000648:	3b01      	subs	r3, #1
 800064a:	6053      	str	r3, [r2, #4]

	/*Set systick to low priority*/
	NVIC_SetPriority(SysTick_IRQn,15);
 800064c:	210f      	movs	r1, #15
 800064e:	f04f 30ff 	mov.w	r0, #4294967295
 8000652:	f7ff fea5 	bl	80003a0 <__NVIC_SetPriority>

	/*Enable systick, select internal clock*/
	SysTick->CTRL  = CTRL_CLCKSRC | CTRL_ENABLE;
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <osKernelLaunch+0x4c>)
 8000658:	2205      	movs	r2, #5
 800065a:	601a      	str	r2, [r3, #0]

	/*Enable systick interrupt*/
	SysTick->CTRL  |= CTRL_TICKINT;
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <osKernelLaunch+0x4c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <osKernelLaunch+0x4c>)
 8000662:	f043 0302 	orr.w	r3, r3, #2
 8000666:	6013      	str	r3, [r2, #0]

	/*Launch scheduler*/
	osSchedulerLaunch();
 8000668:	f000 f81e 	bl	80006a8 <osSchedulerLaunch>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	e000e010 	.word	0xe000e010
 8000678:	200000c8 	.word	0x200000c8

0800067c <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler(void)
{
	/*SUSPEND CURRENT THREAD*/

	/*Disable global interrupts*/
	__asm("CPSID	I");
 800067c:	b672      	cpsid	i

	/*Save r4,r5,r6,r7,r8,r9,r10,11*/
	__asm("PUSH  {R4-R11}");
 800067e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/*Load address of currentPt into r0*/
	__asm("LDR R0, =currentPt");
 8000682:	4808      	ldr	r0, [pc, #32]	; (80006a4 <SysTick_Handler+0x28>)

	/*Load r1 from address equals r0, i.e. r1 =currentPt*/
	__asm("LDR R1,[R0]");
 8000684:	6801      	ldr	r1, [r0, #0]

	/*Store Cortex-M SP at address equals r1, i.e Save SP into tcb */
	__asm("STR SP,[R1]");
 8000686:	f8c1 d000 	str.w	sp, [r1]

    /*CHOOSE NEXT THREAD*/

	 __asm("PUSH	{R0,LR}");
 800068a:	b501      	push	{r0, lr}
	 __asm("BL		osSchedulerRoundRobin");
 800068c:	f000 f824 	bl	80006d8 <osSchedulerRoundRobin>
	 __asm("POP    {R0,LR}");
 8000690:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

     /*R1 =  currentPt i.e. New Thread*/
	 __asm("LDR		R1,[R0]");
 8000694:	6801      	ldr	r1, [r0, #0]
	/*SP  = currentPt->StackPt*/
	 __asm("LDR		SP,[R1]");
 8000696:	f8d1 d000 	ldr.w	sp, [r1]
	/*Restore r4,r5,r6,r7,r8,r9,r10,11*/
	__asm("POP {R4-R11}");
 800069a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/*Enable global interrupts*/
	__asm("CPSIE	I");
 800069e:	b662      	cpsie	i

	/*Return from exception and restore r0,r1,r2,r3,r12,lr,pc,psr */
	__asm("BX	LR");
 80006a0:	4770      	bx	lr



}
 80006a2:	bf00      	nop
 80006a4:	200000ac 	.word	0x200000ac

080006a8 <osSchedulerLaunch>:


void osSchedulerLaunch(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
	/*Load address of currentPt into R0*/
	__asm("LDR R0,=currentPt");
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <osSchedulerLaunch+0x2c>)

	/*Load r2 from address equals r0,i.e r2 =currentPt*/
	__asm("LDR R2,[r0]");
 80006ae:	6802      	ldr	r2, [r0, #0]

	/*Load Cortex-M SP from address equals R2,i.e. SP = currentPt->stackPt*/
	__asm("LDR  SP,[R2]");
 80006b0:	f8d2 d000 	ldr.w	sp, [r2]

	/*Restore r4,r5,r6,r7,r8,r9,r10,r11*/
	__asm("POP {R4-R11}");
 80006b4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/*Restore r12*/
	__asm("POP {R12}");
 80006b8:	f85d cb04 	ldr.w	ip, [sp], #4

	/*Restore r0,r1,r2,r3*/
	__asm("POP	{R0-R3}");
 80006bc:	bc0f      	pop	{r0, r1, r2, r3}

	/*Skip LR */
	__asm("ADD  SP,SP,#4");
 80006be:	b001      	add	sp, #4

	/*Create a new start location by popping LR*/
	__asm("POP {LR}");
 80006c0:	f85d eb04 	ldr.w	lr, [sp], #4

	/*Skip PSR by adding 4 to SP*/
	__asm("ADD  SP,SP,#4");
 80006c4:	b001      	add	sp, #4

	/*Enable global interrupts*/
	__asm("CPSIE	I");
 80006c6:	b662      	cpsie	i

	/*Return from exception*/
	__asm("BX	LR");
 80006c8:	4770      	bx	lr
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	200000ac 	.word	0x200000ac

080006d8 <osSchedulerRoundRobin>:
	INTCTRL = PENDSTSET;
}


void osSchedulerRoundRobin(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	if((++period_tick)  == PERIOD)
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <osSchedulerRoundRobin+0x30>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	4a09      	ldr	r2, [pc, #36]	; (8000708 <osSchedulerRoundRobin+0x30>)
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <osSchedulerRoundRobin+0x30>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b64      	cmp	r3, #100	; 0x64
 80006ec:	d104      	bne.n	80006f8 <osSchedulerRoundRobin+0x20>
	{
		(*task3)();
 80006ee:	f7ff fdc7 	bl	8000280 <task3>

		period_tick = 0;
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <osSchedulerRoundRobin+0x30>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
	}

	currentPt = currentPt->nextPt;
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <osSchedulerRoundRobin+0x34>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	4a03      	ldr	r2, [pc, #12]	; (800070c <osSchedulerRoundRobin+0x34>)
 8000700:	6013      	str	r3, [r2, #0]
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200000a8 	.word	0x200000a8
 800070c:	200000ac 	.word	0x200000ac

08000710 <tim2_1hz_interrupt_init>:


void tim2_1hz_interrupt_init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	/*Enable clock access to tim2*/
	RCC->APB1ENR |=TIM2EN;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <tim2_1hz_interrupt_init+0x50>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	4a11      	ldr	r2, [pc, #68]	; (8000760 <tim2_1hz_interrupt_init+0x50>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set timer prescaler*/
	TIM2->PSC =  1600 - 1; // 16 000  000 / 1600 = 10 000
 8000720:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000724:	f240 623f 	movw	r2, #1599	; 0x63f
 8000728:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set auto-reload value*/
	TIM2->ARR =  10000 -1;  //10 0000 / 10 000 =  1
 800072a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800072e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Clear counter*/
	TIM2->CNT = 0;
 8000734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000738:	2200      	movs	r2, #0
 800073a:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enable timer*/
	TIM2->CR1 =  CR1_CEN;
 800073c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000740:	2201      	movs	r2, #1
 8000742:	601a      	str	r2, [r3, #0]

	/*Enable timer interrupt*/
	TIM2->DIER |= DIER_UIE;
 8000744:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	60d3      	str	r3, [r2, #12]

	/*Enable timer interrupt in NVIC*/
	NVIC_EnableIRQ(TIM2_IRQn);
 8000754:	201c      	movs	r0, #28
 8000756:	f7ff fe05 	bl	8000364 <__NVIC_EnableIRQ>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800

08000764 <osSemaphoreInit>:

void osSemaphoreInit(int32_t *semaphore, int32_t value)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
	*semaphore =  value;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	601a      	str	r2, [r3, #0]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	e00a      	b.n	80007a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000792:	f3af 8000 	nop.w
 8000796:	4601      	mov	r1, r0
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	60ba      	str	r2, [r7, #8]
 800079e:	b2ca      	uxtb	r2, r1
 80007a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	3301      	adds	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697a      	ldr	r2, [r7, #20]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	dbf0      	blt.n	8000792 <_read+0x12>
	}

return len;
 80007b0:	687b      	ldr	r3, [r7, #4]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b086      	sub	sp, #24
 80007be:	af00      	add	r7, sp, #0
 80007c0:	60f8      	str	r0, [r7, #12]
 80007c2:	60b9      	str	r1, [r7, #8]
 80007c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	e009      	b.n	80007e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	60ba      	str	r2, [r7, #8]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f877 	bl	80008c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dbf1      	blt.n	80007cc <_write+0x12>
	}
	return len;
 80007e8:	687b      	ldr	r3, [r7, #4]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <_close>:

int _close(int file)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
	return -1;
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800081a:	605a      	str	r2, [r3, #4]
	return 0;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <_isatty>:

int _isatty(int file)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
	return 1;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
	return 0;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000864:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <_sbrk+0x5c>)
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <_sbrk+0x60>)
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <_sbrk+0x64>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <_sbrk+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	429a      	cmp	r2, r3
 800088a:	d207      	bcs.n	800089c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800088c:	f000 f8dc 	bl	8000a48 <__errno>
 8000890:	4603      	mov	r3, r0
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	e009      	b.n	80008b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_sbrk+0x64>)
 80008ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20020000 	.word	0x20020000
 80008bc:	00000400 	.word	0x00000400
 80008c0:	20000080 	.word	0x20000080
 80008c4:	200013a0 	.word	0x200013a0

080008c8 <__io_putchar>:
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);


int __io_putchar(int ch)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f000 f84f 	bl	8000974 <uart_write>
	return ch;
 80008d6:	687b      	ldr	r3, [r7, #4]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <uart_tx_init>:

void uart_tx_init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	 RCC->AHB1ENR  |= GPIOAEN;
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <uart_tx_init+0x84>)
 80008e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e8:	4a1e      	ldr	r2, [pc, #120]	; (8000964 <uart_tx_init+0x84>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	 GPIOA->MODER &=~(1U<<4);
 80008f0:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <uart_tx_init+0x88>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <uart_tx_init+0x88>)
 80008f6:	f023 0310 	bic.w	r3, r3, #16
 80008fa:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER |=(1U<<5);
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <uart_tx_init+0x88>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a19      	ldr	r2, [pc, #100]	; (8000968 <uart_tx_init+0x88>)
 8000902:	f043 0320 	orr.w	r3, r3, #32
 8000906:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7 (UART2_TX)*/
	 GPIOA->AFR[0] |=(1U<<8);
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <uart_tx_init+0x88>)
 800090a:	6a1b      	ldr	r3, [r3, #32]
 800090c:	4a16      	ldr	r2, [pc, #88]	; (8000968 <uart_tx_init+0x88>)
 800090e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000912:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |=(1U<<9);
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <uart_tx_init+0x88>)
 8000916:	6a1b      	ldr	r3, [r3, #32]
 8000918:	4a13      	ldr	r2, [pc, #76]	; (8000968 <uart_tx_init+0x88>)
 800091a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091e:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] |=(1U<<10);
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <uart_tx_init+0x88>)
 8000922:	6a1b      	ldr	r3, [r3, #32]
 8000924:	4a10      	ldr	r2, [pc, #64]	; (8000968 <uart_tx_init+0x88>)
 8000926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800092a:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] &= ~(1U<<11);
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <uart_tx_init+0x88>)
 800092e:	6a1b      	ldr	r3, [r3, #32]
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <uart_tx_init+0x88>)
 8000932:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000936:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART*/
	 RCC->APB1ENR |= UART2EN;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <uart_tx_init+0x84>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	4a09      	ldr	r2, [pc, #36]	; (8000964 <uart_tx_init+0x84>)
 800093e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000942:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	 uart_set_baudrate(APB1_CLK,UART_BAUDRATE);
 8000944:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000948:	4808      	ldr	r0, [pc, #32]	; (800096c <uart_tx_init+0x8c>)
 800094a:	f000 f82b 	bl	80009a4 <uart_set_baudrate>

	/*Configure transfer direction*/
	 USART2->CR1 = CR1_TE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <uart_tx_init+0x90>)
 8000950:	2208      	movs	r2, #8
 8000952:	60da      	str	r2, [r3, #12]

	/*Enable UART module*/
	 USART2->CR1 |= CR1_UE;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <uart_tx_init+0x90>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	4a05      	ldr	r2, [pc, #20]	; (8000970 <uart_tx_init+0x90>)
 800095a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800095e:	60d3      	str	r3, [r2, #12]
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40020000 	.word	0x40020000
 800096c:	00f42400 	.word	0x00f42400
 8000970:	40004400 	.word	0x40004400

08000974 <uart_write>:

static void uart_write(int ch)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	 while(!(USART2->SR & SR_TXE)){}
 800097c:	bf00      	nop
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <uart_write+0x2c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0f9      	beq.n	800097e <uart_write+0xa>

	/*Write to transmit data register*/
	 USART2->DR =  (ch & 0XFF);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <uart_write+0x2c>)
 800098e:	b2db      	uxtb	r3, r3
 8000990:	6053      	str	r3, [r2, #4]
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40004400 	.word	0x40004400

080009a4 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80009ae:	6839      	ldr	r1, [r7, #0]
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f000 f80b 	bl	80009cc <compute_uart_bd>
 80009b6:	4603      	mov	r3, r0
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <uart_set_baudrate+0x24>)
 80009bc:	609a      	str	r2, [r3, #8]
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40004400 	.word	0x40004400

080009cc <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	085a      	lsrs	r2, r3, #1
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	441a      	add	r2, r3
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e4:	b29b      	uxth	r3, r3
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80009fe:	490d      	ldr	r1, [pc, #52]	; (8000a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a00:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <LoopForever+0xe>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a14:	4c0a      	ldr	r4, [pc, #40]	; (8000a40 <LoopForever+0x16>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a22:	f000 f817 	bl	8000a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a26:	f7ff fc4d 	bl	80002c4 <main>

08000a2a <LoopForever>:

LoopForever:
    b LoopForever
 8000a2a:	e7fe      	b.n	8000a2a <LoopForever>
  ldr   r0, =_estack
 8000a2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000a38:	08001a70 	.word	0x08001a70
  ldr r2, =_sbss
 8000a3c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000a40:	2000139c 	.word	0x2000139c

08000a44 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC_IRQHandler>
	...

08000a48 <__errno>:
 8000a48:	4b01      	ldr	r3, [pc, #4]	; (8000a50 <__errno+0x8>)
 8000a4a:	6818      	ldr	r0, [r3, #0]
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000000 	.word	0x20000000

08000a54 <__libc_init_array>:
 8000a54:	b570      	push	{r4, r5, r6, lr}
 8000a56:	4d0d      	ldr	r5, [pc, #52]	; (8000a8c <__libc_init_array+0x38>)
 8000a58:	4c0d      	ldr	r4, [pc, #52]	; (8000a90 <__libc_init_array+0x3c>)
 8000a5a:	1b64      	subs	r4, r4, r5
 8000a5c:	10a4      	asrs	r4, r4, #2
 8000a5e:	2600      	movs	r6, #0
 8000a60:	42a6      	cmp	r6, r4
 8000a62:	d109      	bne.n	8000a78 <__libc_init_array+0x24>
 8000a64:	4d0b      	ldr	r5, [pc, #44]	; (8000a94 <__libc_init_array+0x40>)
 8000a66:	4c0c      	ldr	r4, [pc, #48]	; (8000a98 <__libc_init_array+0x44>)
 8000a68:	f000 ff76 	bl	8001958 <_init>
 8000a6c:	1b64      	subs	r4, r4, r5
 8000a6e:	10a4      	asrs	r4, r4, #2
 8000a70:	2600      	movs	r6, #0
 8000a72:	42a6      	cmp	r6, r4
 8000a74:	d105      	bne.n	8000a82 <__libc_init_array+0x2e>
 8000a76:	bd70      	pop	{r4, r5, r6, pc}
 8000a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a7c:	4798      	blx	r3
 8000a7e:	3601      	adds	r6, #1
 8000a80:	e7ee      	b.n	8000a60 <__libc_init_array+0xc>
 8000a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a86:	4798      	blx	r3
 8000a88:	3601      	adds	r6, #1
 8000a8a:	e7f2      	b.n	8000a72 <__libc_init_array+0x1e>
 8000a8c:	08001a68 	.word	0x08001a68
 8000a90:	08001a68 	.word	0x08001a68
 8000a94:	08001a68 	.word	0x08001a68
 8000a98:	08001a6c 	.word	0x08001a6c

08000a9c <memset>:
 8000a9c:	4402      	add	r2, r0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d100      	bne.n	8000aa6 <memset+0xa>
 8000aa4:	4770      	bx	lr
 8000aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8000aaa:	e7f9      	b.n	8000aa0 <memset+0x4>

08000aac <iprintf>:
 8000aac:	b40f      	push	{r0, r1, r2, r3}
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <iprintf+0x2c>)
 8000ab0:	b513      	push	{r0, r1, r4, lr}
 8000ab2:	681c      	ldr	r4, [r3, #0]
 8000ab4:	b124      	cbz	r4, 8000ac0 <iprintf+0x14>
 8000ab6:	69a3      	ldr	r3, [r4, #24]
 8000ab8:	b913      	cbnz	r3, 8000ac0 <iprintf+0x14>
 8000aba:	4620      	mov	r0, r4
 8000abc:	f000 f866 	bl	8000b8c <__sinit>
 8000ac0:	ab05      	add	r3, sp, #20
 8000ac2:	9a04      	ldr	r2, [sp, #16]
 8000ac4:	68a1      	ldr	r1, [r4, #8]
 8000ac6:	9301      	str	r3, [sp, #4]
 8000ac8:	4620      	mov	r0, r4
 8000aca:	f000 f983 	bl	8000dd4 <_vfiprintf_r>
 8000ace:	b002      	add	sp, #8
 8000ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ad4:	b004      	add	sp, #16
 8000ad6:	4770      	bx	lr
 8000ad8:	20000000 	.word	0x20000000

08000adc <std>:
 8000adc:	2300      	movs	r3, #0
 8000ade:	b510      	push	{r4, lr}
 8000ae0:	4604      	mov	r4, r0
 8000ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8000ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000aea:	6083      	str	r3, [r0, #8]
 8000aec:	8181      	strh	r1, [r0, #12]
 8000aee:	6643      	str	r3, [r0, #100]	; 0x64
 8000af0:	81c2      	strh	r2, [r0, #14]
 8000af2:	6183      	str	r3, [r0, #24]
 8000af4:	4619      	mov	r1, r3
 8000af6:	2208      	movs	r2, #8
 8000af8:	305c      	adds	r0, #92	; 0x5c
 8000afa:	f7ff ffcf 	bl	8000a9c <memset>
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <std+0x38>)
 8000b00:	6263      	str	r3, [r4, #36]	; 0x24
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <std+0x3c>)
 8000b04:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <std+0x40>)
 8000b08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <std+0x44>)
 8000b0c:	6224      	str	r4, [r4, #32]
 8000b0e:	6323      	str	r3, [r4, #48]	; 0x30
 8000b10:	bd10      	pop	{r4, pc}
 8000b12:	bf00      	nop
 8000b14:	0800137d 	.word	0x0800137d
 8000b18:	0800139f 	.word	0x0800139f
 8000b1c:	080013d7 	.word	0x080013d7
 8000b20:	080013fb 	.word	0x080013fb

08000b24 <_cleanup_r>:
 8000b24:	4901      	ldr	r1, [pc, #4]	; (8000b2c <_cleanup_r+0x8>)
 8000b26:	f000 b8af 	b.w	8000c88 <_fwalk_reent>
 8000b2a:	bf00      	nop
 8000b2c:	080016d5 	.word	0x080016d5

08000b30 <__sfmoreglue>:
 8000b30:	b570      	push	{r4, r5, r6, lr}
 8000b32:	1e4a      	subs	r2, r1, #1
 8000b34:	2568      	movs	r5, #104	; 0x68
 8000b36:	4355      	muls	r5, r2
 8000b38:	460e      	mov	r6, r1
 8000b3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b3e:	f000 f8c5 	bl	8000ccc <_malloc_r>
 8000b42:	4604      	mov	r4, r0
 8000b44:	b140      	cbz	r0, 8000b58 <__sfmoreglue+0x28>
 8000b46:	2100      	movs	r1, #0
 8000b48:	e9c0 1600 	strd	r1, r6, [r0]
 8000b4c:	300c      	adds	r0, #12
 8000b4e:	60a0      	str	r0, [r4, #8]
 8000b50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b54:	f7ff ffa2 	bl	8000a9c <memset>
 8000b58:	4620      	mov	r0, r4
 8000b5a:	bd70      	pop	{r4, r5, r6, pc}

08000b5c <__sfp_lock_acquire>:
 8000b5c:	4801      	ldr	r0, [pc, #4]	; (8000b64 <__sfp_lock_acquire+0x8>)
 8000b5e:	f000 b8b3 	b.w	8000cc8 <__retarget_lock_acquire_recursive>
 8000b62:	bf00      	nop
 8000b64:	20001394 	.word	0x20001394

08000b68 <__sfp_lock_release>:
 8000b68:	4801      	ldr	r0, [pc, #4]	; (8000b70 <__sfp_lock_release+0x8>)
 8000b6a:	f000 b8ae 	b.w	8000cca <__retarget_lock_release_recursive>
 8000b6e:	bf00      	nop
 8000b70:	20001394 	.word	0x20001394

08000b74 <__sinit_lock_acquire>:
 8000b74:	4801      	ldr	r0, [pc, #4]	; (8000b7c <__sinit_lock_acquire+0x8>)
 8000b76:	f000 b8a7 	b.w	8000cc8 <__retarget_lock_acquire_recursive>
 8000b7a:	bf00      	nop
 8000b7c:	2000138f 	.word	0x2000138f

08000b80 <__sinit_lock_release>:
 8000b80:	4801      	ldr	r0, [pc, #4]	; (8000b88 <__sinit_lock_release+0x8>)
 8000b82:	f000 b8a2 	b.w	8000cca <__retarget_lock_release_recursive>
 8000b86:	bf00      	nop
 8000b88:	2000138f 	.word	0x2000138f

08000b8c <__sinit>:
 8000b8c:	b510      	push	{r4, lr}
 8000b8e:	4604      	mov	r4, r0
 8000b90:	f7ff fff0 	bl	8000b74 <__sinit_lock_acquire>
 8000b94:	69a3      	ldr	r3, [r4, #24]
 8000b96:	b11b      	cbz	r3, 8000ba0 <__sinit+0x14>
 8000b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b9c:	f7ff bff0 	b.w	8000b80 <__sinit_lock_release>
 8000ba0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ba4:	6523      	str	r3, [r4, #80]	; 0x50
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <__sinit+0x68>)
 8000ba8:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <__sinit+0x6c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	62a2      	str	r2, [r4, #40]	; 0x28
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	bf04      	itt	eq
 8000bb2:	2301      	moveq	r3, #1
 8000bb4:	61a3      	streq	r3, [r4, #24]
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	f000 f820 	bl	8000bfc <__sfp>
 8000bbc:	6060      	str	r0, [r4, #4]
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	f000 f81c 	bl	8000bfc <__sfp>
 8000bc4:	60a0      	str	r0, [r4, #8]
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	f000 f818 	bl	8000bfc <__sfp>
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60e0      	str	r0, [r4, #12]
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	6860      	ldr	r0, [r4, #4]
 8000bd4:	f7ff ff82 	bl	8000adc <std>
 8000bd8:	68a0      	ldr	r0, [r4, #8]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2109      	movs	r1, #9
 8000bde:	f7ff ff7d 	bl	8000adc <std>
 8000be2:	68e0      	ldr	r0, [r4, #12]
 8000be4:	2202      	movs	r2, #2
 8000be6:	2112      	movs	r1, #18
 8000be8:	f7ff ff78 	bl	8000adc <std>
 8000bec:	2301      	movs	r3, #1
 8000bee:	61a3      	str	r3, [r4, #24]
 8000bf0:	e7d2      	b.n	8000b98 <__sinit+0xc>
 8000bf2:	bf00      	nop
 8000bf4:	080019d0 	.word	0x080019d0
 8000bf8:	08000b25 	.word	0x08000b25

08000bfc <__sfp>:
 8000bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfe:	4607      	mov	r7, r0
 8000c00:	f7ff ffac 	bl	8000b5c <__sfp_lock_acquire>
 8000c04:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <__sfp+0x84>)
 8000c06:	681e      	ldr	r6, [r3, #0]
 8000c08:	69b3      	ldr	r3, [r6, #24]
 8000c0a:	b913      	cbnz	r3, 8000c12 <__sfp+0x16>
 8000c0c:	4630      	mov	r0, r6
 8000c0e:	f7ff ffbd 	bl	8000b8c <__sinit>
 8000c12:	3648      	adds	r6, #72	; 0x48
 8000c14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	d503      	bpl.n	8000c24 <__sfp+0x28>
 8000c1c:	6833      	ldr	r3, [r6, #0]
 8000c1e:	b30b      	cbz	r3, 8000c64 <__sfp+0x68>
 8000c20:	6836      	ldr	r6, [r6, #0]
 8000c22:	e7f7      	b.n	8000c14 <__sfp+0x18>
 8000c24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c28:	b9d5      	cbnz	r5, 8000c60 <__sfp+0x64>
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <__sfp+0x88>)
 8000c2c:	60e3      	str	r3, [r4, #12]
 8000c2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c32:	6665      	str	r5, [r4, #100]	; 0x64
 8000c34:	f000 f847 	bl	8000cc6 <__retarget_lock_init_recursive>
 8000c38:	f7ff ff96 	bl	8000b68 <__sfp_lock_release>
 8000c3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c44:	6025      	str	r5, [r4, #0]
 8000c46:	61a5      	str	r5, [r4, #24]
 8000c48:	2208      	movs	r2, #8
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c50:	f7ff ff24 	bl	8000a9c <memset>
 8000c54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c60:	3468      	adds	r4, #104	; 0x68
 8000c62:	e7d9      	b.n	8000c18 <__sfp+0x1c>
 8000c64:	2104      	movs	r1, #4
 8000c66:	4638      	mov	r0, r7
 8000c68:	f7ff ff62 	bl	8000b30 <__sfmoreglue>
 8000c6c:	4604      	mov	r4, r0
 8000c6e:	6030      	str	r0, [r6, #0]
 8000c70:	2800      	cmp	r0, #0
 8000c72:	d1d5      	bne.n	8000c20 <__sfp+0x24>
 8000c74:	f7ff ff78 	bl	8000b68 <__sfp_lock_release>
 8000c78:	230c      	movs	r3, #12
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	e7ee      	b.n	8000c5c <__sfp+0x60>
 8000c7e:	bf00      	nop
 8000c80:	080019d0 	.word	0x080019d0
 8000c84:	ffff0001 	.word	0xffff0001

08000c88 <_fwalk_reent>:
 8000c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	4688      	mov	r8, r1
 8000c90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c94:	2700      	movs	r7, #0
 8000c96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c9a:	f1b9 0901 	subs.w	r9, r9, #1
 8000c9e:	d505      	bpl.n	8000cac <_fwalk_reent+0x24>
 8000ca0:	6824      	ldr	r4, [r4, #0]
 8000ca2:	2c00      	cmp	r4, #0
 8000ca4:	d1f7      	bne.n	8000c96 <_fwalk_reent+0xe>
 8000ca6:	4638      	mov	r0, r7
 8000ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cac:	89ab      	ldrh	r3, [r5, #12]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d907      	bls.n	8000cc2 <_fwalk_reent+0x3a>
 8000cb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	d003      	beq.n	8000cc2 <_fwalk_reent+0x3a>
 8000cba:	4629      	mov	r1, r5
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	47c0      	blx	r8
 8000cc0:	4307      	orrs	r7, r0
 8000cc2:	3568      	adds	r5, #104	; 0x68
 8000cc4:	e7e9      	b.n	8000c9a <_fwalk_reent+0x12>

08000cc6 <__retarget_lock_init_recursive>:
 8000cc6:	4770      	bx	lr

08000cc8 <__retarget_lock_acquire_recursive>:
 8000cc8:	4770      	bx	lr

08000cca <__retarget_lock_release_recursive>:
 8000cca:	4770      	bx	lr

08000ccc <_malloc_r>:
 8000ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cce:	1ccd      	adds	r5, r1, #3
 8000cd0:	f025 0503 	bic.w	r5, r5, #3
 8000cd4:	3508      	adds	r5, #8
 8000cd6:	2d0c      	cmp	r5, #12
 8000cd8:	bf38      	it	cc
 8000cda:	250c      	movcc	r5, #12
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	db01      	blt.n	8000ce6 <_malloc_r+0x1a>
 8000ce2:	42a9      	cmp	r1, r5
 8000ce4:	d903      	bls.n	8000cee <_malloc_r+0x22>
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	6033      	str	r3, [r6, #0]
 8000cea:	2000      	movs	r0, #0
 8000cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cee:	f000 fda3 	bl	8001838 <__malloc_lock>
 8000cf2:	4921      	ldr	r1, [pc, #132]	; (8000d78 <_malloc_r+0xac>)
 8000cf4:	680a      	ldr	r2, [r1, #0]
 8000cf6:	4614      	mov	r4, r2
 8000cf8:	b99c      	cbnz	r4, 8000d22 <_malloc_r+0x56>
 8000cfa:	4f20      	ldr	r7, [pc, #128]	; (8000d7c <_malloc_r+0xb0>)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	b923      	cbnz	r3, 8000d0a <_malloc_r+0x3e>
 8000d00:	4621      	mov	r1, r4
 8000d02:	4630      	mov	r0, r6
 8000d04:	f000 fb2a 	bl	800135c <_sbrk_r>
 8000d08:	6038      	str	r0, [r7, #0]
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	f000 fb25 	bl	800135c <_sbrk_r>
 8000d12:	1c43      	adds	r3, r0, #1
 8000d14:	d123      	bne.n	8000d5e <_malloc_r+0x92>
 8000d16:	230c      	movs	r3, #12
 8000d18:	6033      	str	r3, [r6, #0]
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	f000 fd92 	bl	8001844 <__malloc_unlock>
 8000d20:	e7e3      	b.n	8000cea <_malloc_r+0x1e>
 8000d22:	6823      	ldr	r3, [r4, #0]
 8000d24:	1b5b      	subs	r3, r3, r5
 8000d26:	d417      	bmi.n	8000d58 <_malloc_r+0x8c>
 8000d28:	2b0b      	cmp	r3, #11
 8000d2a:	d903      	bls.n	8000d34 <_malloc_r+0x68>
 8000d2c:	6023      	str	r3, [r4, #0]
 8000d2e:	441c      	add	r4, r3
 8000d30:	6025      	str	r5, [r4, #0]
 8000d32:	e004      	b.n	8000d3e <_malloc_r+0x72>
 8000d34:	6863      	ldr	r3, [r4, #4]
 8000d36:	42a2      	cmp	r2, r4
 8000d38:	bf0c      	ite	eq
 8000d3a:	600b      	streq	r3, [r1, #0]
 8000d3c:	6053      	strne	r3, [r2, #4]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	f000 fd80 	bl	8001844 <__malloc_unlock>
 8000d44:	f104 000b 	add.w	r0, r4, #11
 8000d48:	1d23      	adds	r3, r4, #4
 8000d4a:	f020 0007 	bic.w	r0, r0, #7
 8000d4e:	1ac2      	subs	r2, r0, r3
 8000d50:	d0cc      	beq.n	8000cec <_malloc_r+0x20>
 8000d52:	1a1b      	subs	r3, r3, r0
 8000d54:	50a3      	str	r3, [r4, r2]
 8000d56:	e7c9      	b.n	8000cec <_malloc_r+0x20>
 8000d58:	4622      	mov	r2, r4
 8000d5a:	6864      	ldr	r4, [r4, #4]
 8000d5c:	e7cc      	b.n	8000cf8 <_malloc_r+0x2c>
 8000d5e:	1cc4      	adds	r4, r0, #3
 8000d60:	f024 0403 	bic.w	r4, r4, #3
 8000d64:	42a0      	cmp	r0, r4
 8000d66:	d0e3      	beq.n	8000d30 <_malloc_r+0x64>
 8000d68:	1a21      	subs	r1, r4, r0
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	f000 faf6 	bl	800135c <_sbrk_r>
 8000d70:	3001      	adds	r0, #1
 8000d72:	d1dd      	bne.n	8000d30 <_malloc_r+0x64>
 8000d74:	e7cf      	b.n	8000d16 <_malloc_r+0x4a>
 8000d76:	bf00      	nop
 8000d78:	20000084 	.word	0x20000084
 8000d7c:	20000088 	.word	0x20000088

08000d80 <__sfputc_r>:
 8000d80:	6893      	ldr	r3, [r2, #8]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	b410      	push	{r4}
 8000d88:	6093      	str	r3, [r2, #8]
 8000d8a:	da08      	bge.n	8000d9e <__sfputc_r+0x1e>
 8000d8c:	6994      	ldr	r4, [r2, #24]
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	db01      	blt.n	8000d96 <__sfputc_r+0x16>
 8000d92:	290a      	cmp	r1, #10
 8000d94:	d103      	bne.n	8000d9e <__sfputc_r+0x1e>
 8000d96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d9a:	f000 bb33 	b.w	8001404 <__swbuf_r>
 8000d9e:	6813      	ldr	r3, [r2, #0]
 8000da0:	1c58      	adds	r0, r3, #1
 8000da2:	6010      	str	r0, [r2, #0]
 8000da4:	7019      	strb	r1, [r3, #0]
 8000da6:	4608      	mov	r0, r1
 8000da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <__sfputs_r>:
 8000dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db0:	4606      	mov	r6, r0
 8000db2:	460f      	mov	r7, r1
 8000db4:	4614      	mov	r4, r2
 8000db6:	18d5      	adds	r5, r2, r3
 8000db8:	42ac      	cmp	r4, r5
 8000dba:	d101      	bne.n	8000dc0 <__sfputs_r+0x12>
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	e007      	b.n	8000dd0 <__sfputs_r+0x22>
 8000dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dc4:	463a      	mov	r2, r7
 8000dc6:	4630      	mov	r0, r6
 8000dc8:	f7ff ffda 	bl	8000d80 <__sfputc_r>
 8000dcc:	1c43      	adds	r3, r0, #1
 8000dce:	d1f3      	bne.n	8000db8 <__sfputs_r+0xa>
 8000dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000dd4 <_vfiprintf_r>:
 8000dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dd8:	460d      	mov	r5, r1
 8000dda:	b09d      	sub	sp, #116	; 0x74
 8000ddc:	4614      	mov	r4, r2
 8000dde:	4698      	mov	r8, r3
 8000de0:	4606      	mov	r6, r0
 8000de2:	b118      	cbz	r0, 8000dec <_vfiprintf_r+0x18>
 8000de4:	6983      	ldr	r3, [r0, #24]
 8000de6:	b90b      	cbnz	r3, 8000dec <_vfiprintf_r+0x18>
 8000de8:	f7ff fed0 	bl	8000b8c <__sinit>
 8000dec:	4b89      	ldr	r3, [pc, #548]	; (8001014 <_vfiprintf_r+0x240>)
 8000dee:	429d      	cmp	r5, r3
 8000df0:	d11b      	bne.n	8000e2a <_vfiprintf_r+0x56>
 8000df2:	6875      	ldr	r5, [r6, #4]
 8000df4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000df6:	07d9      	lsls	r1, r3, #31
 8000df8:	d405      	bmi.n	8000e06 <_vfiprintf_r+0x32>
 8000dfa:	89ab      	ldrh	r3, [r5, #12]
 8000dfc:	059a      	lsls	r2, r3, #22
 8000dfe:	d402      	bmi.n	8000e06 <_vfiprintf_r+0x32>
 8000e00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e02:	f7ff ff61 	bl	8000cc8 <__retarget_lock_acquire_recursive>
 8000e06:	89ab      	ldrh	r3, [r5, #12]
 8000e08:	071b      	lsls	r3, r3, #28
 8000e0a:	d501      	bpl.n	8000e10 <_vfiprintf_r+0x3c>
 8000e0c:	692b      	ldr	r3, [r5, #16]
 8000e0e:	b9eb      	cbnz	r3, 8000e4c <_vfiprintf_r+0x78>
 8000e10:	4629      	mov	r1, r5
 8000e12:	4630      	mov	r0, r6
 8000e14:	f000 fb5a 	bl	80014cc <__swsetup_r>
 8000e18:	b1c0      	cbz	r0, 8000e4c <_vfiprintf_r+0x78>
 8000e1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e1c:	07dc      	lsls	r4, r3, #31
 8000e1e:	d50e      	bpl.n	8000e3e <_vfiprintf_r+0x6a>
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	b01d      	add	sp, #116	; 0x74
 8000e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e2a:	4b7b      	ldr	r3, [pc, #492]	; (8001018 <_vfiprintf_r+0x244>)
 8000e2c:	429d      	cmp	r5, r3
 8000e2e:	d101      	bne.n	8000e34 <_vfiprintf_r+0x60>
 8000e30:	68b5      	ldr	r5, [r6, #8]
 8000e32:	e7df      	b.n	8000df4 <_vfiprintf_r+0x20>
 8000e34:	4b79      	ldr	r3, [pc, #484]	; (800101c <_vfiprintf_r+0x248>)
 8000e36:	429d      	cmp	r5, r3
 8000e38:	bf08      	it	eq
 8000e3a:	68f5      	ldreq	r5, [r6, #12]
 8000e3c:	e7da      	b.n	8000df4 <_vfiprintf_r+0x20>
 8000e3e:	89ab      	ldrh	r3, [r5, #12]
 8000e40:	0598      	lsls	r0, r3, #22
 8000e42:	d4ed      	bmi.n	8000e20 <_vfiprintf_r+0x4c>
 8000e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e46:	f7ff ff40 	bl	8000cca <__retarget_lock_release_recursive>
 8000e4a:	e7e9      	b.n	8000e20 <_vfiprintf_r+0x4c>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8000e50:	2320      	movs	r3, #32
 8000e52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000e56:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e5a:	2330      	movs	r3, #48	; 0x30
 8000e5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001020 <_vfiprintf_r+0x24c>
 8000e60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000e64:	f04f 0901 	mov.w	r9, #1
 8000e68:	4623      	mov	r3, r4
 8000e6a:	469a      	mov	sl, r3
 8000e6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e70:	b10a      	cbz	r2, 8000e76 <_vfiprintf_r+0xa2>
 8000e72:	2a25      	cmp	r2, #37	; 0x25
 8000e74:	d1f9      	bne.n	8000e6a <_vfiprintf_r+0x96>
 8000e76:	ebba 0b04 	subs.w	fp, sl, r4
 8000e7a:	d00b      	beq.n	8000e94 <_vfiprintf_r+0xc0>
 8000e7c:	465b      	mov	r3, fp
 8000e7e:	4622      	mov	r2, r4
 8000e80:	4629      	mov	r1, r5
 8000e82:	4630      	mov	r0, r6
 8000e84:	f7ff ff93 	bl	8000dae <__sfputs_r>
 8000e88:	3001      	adds	r0, #1
 8000e8a:	f000 80aa 	beq.w	8000fe2 <_vfiprintf_r+0x20e>
 8000e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e90:	445a      	add	r2, fp
 8000e92:	9209      	str	r2, [sp, #36]	; 0x24
 8000e94:	f89a 3000 	ldrb.w	r3, [sl]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 80a2 	beq.w	8000fe2 <_vfiprintf_r+0x20e>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ea8:	f10a 0a01 	add.w	sl, sl, #1
 8000eac:	9304      	str	r3, [sp, #16]
 8000eae:	9307      	str	r3, [sp, #28]
 8000eb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000eb4:	931a      	str	r3, [sp, #104]	; 0x68
 8000eb6:	4654      	mov	r4, sl
 8000eb8:	2205      	movs	r2, #5
 8000eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ebe:	4858      	ldr	r0, [pc, #352]	; (8001020 <_vfiprintf_r+0x24c>)
 8000ec0:	f7ff f98e 	bl	80001e0 <memchr>
 8000ec4:	9a04      	ldr	r2, [sp, #16]
 8000ec6:	b9d8      	cbnz	r0, 8000f00 <_vfiprintf_r+0x12c>
 8000ec8:	06d1      	lsls	r1, r2, #27
 8000eca:	bf44      	itt	mi
 8000ecc:	2320      	movmi	r3, #32
 8000ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ed2:	0713      	lsls	r3, r2, #28
 8000ed4:	bf44      	itt	mi
 8000ed6:	232b      	movmi	r3, #43	; 0x2b
 8000ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000edc:	f89a 3000 	ldrb.w	r3, [sl]
 8000ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8000ee2:	d015      	beq.n	8000f10 <_vfiprintf_r+0x13c>
 8000ee4:	9a07      	ldr	r2, [sp, #28]
 8000ee6:	4654      	mov	r4, sl
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f04f 0c0a 	mov.w	ip, #10
 8000eee:	4621      	mov	r1, r4
 8000ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ef4:	3b30      	subs	r3, #48	; 0x30
 8000ef6:	2b09      	cmp	r3, #9
 8000ef8:	d94e      	bls.n	8000f98 <_vfiprintf_r+0x1c4>
 8000efa:	b1b0      	cbz	r0, 8000f2a <_vfiprintf_r+0x156>
 8000efc:	9207      	str	r2, [sp, #28]
 8000efe:	e014      	b.n	8000f2a <_vfiprintf_r+0x156>
 8000f00:	eba0 0308 	sub.w	r3, r0, r8
 8000f04:	fa09 f303 	lsl.w	r3, r9, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	9304      	str	r3, [sp, #16]
 8000f0c:	46a2      	mov	sl, r4
 8000f0e:	e7d2      	b.n	8000eb6 <_vfiprintf_r+0xe2>
 8000f10:	9b03      	ldr	r3, [sp, #12]
 8000f12:	1d19      	adds	r1, r3, #4
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	9103      	str	r1, [sp, #12]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	bfbb      	ittet	lt
 8000f1c:	425b      	neglt	r3, r3
 8000f1e:	f042 0202 	orrlt.w	r2, r2, #2
 8000f22:	9307      	strge	r3, [sp, #28]
 8000f24:	9307      	strlt	r3, [sp, #28]
 8000f26:	bfb8      	it	lt
 8000f28:	9204      	strlt	r2, [sp, #16]
 8000f2a:	7823      	ldrb	r3, [r4, #0]
 8000f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8000f2e:	d10c      	bne.n	8000f4a <_vfiprintf_r+0x176>
 8000f30:	7863      	ldrb	r3, [r4, #1]
 8000f32:	2b2a      	cmp	r3, #42	; 0x2a
 8000f34:	d135      	bne.n	8000fa2 <_vfiprintf_r+0x1ce>
 8000f36:	9b03      	ldr	r3, [sp, #12]
 8000f38:	1d1a      	adds	r2, r3, #4
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	9203      	str	r2, [sp, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	bfb8      	it	lt
 8000f42:	f04f 33ff 	movlt.w	r3, #4294967295
 8000f46:	3402      	adds	r4, #2
 8000f48:	9305      	str	r3, [sp, #20]
 8000f4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001030 <_vfiprintf_r+0x25c>
 8000f4e:	7821      	ldrb	r1, [r4, #0]
 8000f50:	2203      	movs	r2, #3
 8000f52:	4650      	mov	r0, sl
 8000f54:	f7ff f944 	bl	80001e0 <memchr>
 8000f58:	b140      	cbz	r0, 8000f6c <_vfiprintf_r+0x198>
 8000f5a:	2340      	movs	r3, #64	; 0x40
 8000f5c:	eba0 000a 	sub.w	r0, r0, sl
 8000f60:	fa03 f000 	lsl.w	r0, r3, r0
 8000f64:	9b04      	ldr	r3, [sp, #16]
 8000f66:	4303      	orrs	r3, r0
 8000f68:	3401      	adds	r4, #1
 8000f6a:	9304      	str	r3, [sp, #16]
 8000f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f70:	482c      	ldr	r0, [pc, #176]	; (8001024 <_vfiprintf_r+0x250>)
 8000f72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000f76:	2206      	movs	r2, #6
 8000f78:	f7ff f932 	bl	80001e0 <memchr>
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d03f      	beq.n	8001000 <_vfiprintf_r+0x22c>
 8000f80:	4b29      	ldr	r3, [pc, #164]	; (8001028 <_vfiprintf_r+0x254>)
 8000f82:	bb1b      	cbnz	r3, 8000fcc <_vfiprintf_r+0x1f8>
 8000f84:	9b03      	ldr	r3, [sp, #12]
 8000f86:	3307      	adds	r3, #7
 8000f88:	f023 0307 	bic.w	r3, r3, #7
 8000f8c:	3308      	adds	r3, #8
 8000f8e:	9303      	str	r3, [sp, #12]
 8000f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f92:	443b      	add	r3, r7
 8000f94:	9309      	str	r3, [sp, #36]	; 0x24
 8000f96:	e767      	b.n	8000e68 <_vfiprintf_r+0x94>
 8000f98:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f9c:	460c      	mov	r4, r1
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	e7a5      	b.n	8000eee <_vfiprintf_r+0x11a>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	3401      	adds	r4, #1
 8000fa6:	9305      	str	r3, [sp, #20]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f04f 0c0a 	mov.w	ip, #10
 8000fae:	4620      	mov	r0, r4
 8000fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000fb4:	3a30      	subs	r2, #48	; 0x30
 8000fb6:	2a09      	cmp	r2, #9
 8000fb8:	d903      	bls.n	8000fc2 <_vfiprintf_r+0x1ee>
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0c5      	beq.n	8000f4a <_vfiprintf_r+0x176>
 8000fbe:	9105      	str	r1, [sp, #20]
 8000fc0:	e7c3      	b.n	8000f4a <_vfiprintf_r+0x176>
 8000fc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e7f0      	b.n	8000fae <_vfiprintf_r+0x1da>
 8000fcc:	ab03      	add	r3, sp, #12
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	462a      	mov	r2, r5
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <_vfiprintf_r+0x258>)
 8000fd4:	a904      	add	r1, sp, #16
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	f3af 8000 	nop.w
 8000fdc:	4607      	mov	r7, r0
 8000fde:	1c78      	adds	r0, r7, #1
 8000fe0:	d1d6      	bne.n	8000f90 <_vfiprintf_r+0x1bc>
 8000fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000fe4:	07d9      	lsls	r1, r3, #31
 8000fe6:	d405      	bmi.n	8000ff4 <_vfiprintf_r+0x220>
 8000fe8:	89ab      	ldrh	r3, [r5, #12]
 8000fea:	059a      	lsls	r2, r3, #22
 8000fec:	d402      	bmi.n	8000ff4 <_vfiprintf_r+0x220>
 8000fee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ff0:	f7ff fe6b 	bl	8000cca <__retarget_lock_release_recursive>
 8000ff4:	89ab      	ldrh	r3, [r5, #12]
 8000ff6:	065b      	lsls	r3, r3, #25
 8000ff8:	f53f af12 	bmi.w	8000e20 <_vfiprintf_r+0x4c>
 8000ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ffe:	e711      	b.n	8000e24 <_vfiprintf_r+0x50>
 8001000:	ab03      	add	r3, sp, #12
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	462a      	mov	r2, r5
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <_vfiprintf_r+0x258>)
 8001008:	a904      	add	r1, sp, #16
 800100a:	4630      	mov	r0, r6
 800100c:	f000 f880 	bl	8001110 <_printf_i>
 8001010:	e7e4      	b.n	8000fdc <_vfiprintf_r+0x208>
 8001012:	bf00      	nop
 8001014:	080019f4 	.word	0x080019f4
 8001018:	08001a14 	.word	0x08001a14
 800101c:	080019d4 	.word	0x080019d4
 8001020:	08001a34 	.word	0x08001a34
 8001024:	08001a3e 	.word	0x08001a3e
 8001028:	00000000 	.word	0x00000000
 800102c:	08000daf 	.word	0x08000daf
 8001030:	08001a3a 	.word	0x08001a3a

08001034 <_printf_common>:
 8001034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001038:	4616      	mov	r6, r2
 800103a:	4699      	mov	r9, r3
 800103c:	688a      	ldr	r2, [r1, #8]
 800103e:	690b      	ldr	r3, [r1, #16]
 8001040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001044:	4293      	cmp	r3, r2
 8001046:	bfb8      	it	lt
 8001048:	4613      	movlt	r3, r2
 800104a:	6033      	str	r3, [r6, #0]
 800104c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001050:	4607      	mov	r7, r0
 8001052:	460c      	mov	r4, r1
 8001054:	b10a      	cbz	r2, 800105a <_printf_common+0x26>
 8001056:	3301      	adds	r3, #1
 8001058:	6033      	str	r3, [r6, #0]
 800105a:	6823      	ldr	r3, [r4, #0]
 800105c:	0699      	lsls	r1, r3, #26
 800105e:	bf42      	ittt	mi
 8001060:	6833      	ldrmi	r3, [r6, #0]
 8001062:	3302      	addmi	r3, #2
 8001064:	6033      	strmi	r3, [r6, #0]
 8001066:	6825      	ldr	r5, [r4, #0]
 8001068:	f015 0506 	ands.w	r5, r5, #6
 800106c:	d106      	bne.n	800107c <_printf_common+0x48>
 800106e:	f104 0a19 	add.w	sl, r4, #25
 8001072:	68e3      	ldr	r3, [r4, #12]
 8001074:	6832      	ldr	r2, [r6, #0]
 8001076:	1a9b      	subs	r3, r3, r2
 8001078:	42ab      	cmp	r3, r5
 800107a:	dc26      	bgt.n	80010ca <_printf_common+0x96>
 800107c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001080:	1e13      	subs	r3, r2, #0
 8001082:	6822      	ldr	r2, [r4, #0]
 8001084:	bf18      	it	ne
 8001086:	2301      	movne	r3, #1
 8001088:	0692      	lsls	r2, r2, #26
 800108a:	d42b      	bmi.n	80010e4 <_printf_common+0xb0>
 800108c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001090:	4649      	mov	r1, r9
 8001092:	4638      	mov	r0, r7
 8001094:	47c0      	blx	r8
 8001096:	3001      	adds	r0, #1
 8001098:	d01e      	beq.n	80010d8 <_printf_common+0xa4>
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	68e5      	ldr	r5, [r4, #12]
 800109e:	6832      	ldr	r2, [r6, #0]
 80010a0:	f003 0306 	and.w	r3, r3, #6
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	bf08      	it	eq
 80010a8:	1aad      	subeq	r5, r5, r2
 80010aa:	68a3      	ldr	r3, [r4, #8]
 80010ac:	6922      	ldr	r2, [r4, #16]
 80010ae:	bf0c      	ite	eq
 80010b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80010b4:	2500      	movne	r5, #0
 80010b6:	4293      	cmp	r3, r2
 80010b8:	bfc4      	itt	gt
 80010ba:	1a9b      	subgt	r3, r3, r2
 80010bc:	18ed      	addgt	r5, r5, r3
 80010be:	2600      	movs	r6, #0
 80010c0:	341a      	adds	r4, #26
 80010c2:	42b5      	cmp	r5, r6
 80010c4:	d11a      	bne.n	80010fc <_printf_common+0xc8>
 80010c6:	2000      	movs	r0, #0
 80010c8:	e008      	b.n	80010dc <_printf_common+0xa8>
 80010ca:	2301      	movs	r3, #1
 80010cc:	4652      	mov	r2, sl
 80010ce:	4649      	mov	r1, r9
 80010d0:	4638      	mov	r0, r7
 80010d2:	47c0      	blx	r8
 80010d4:	3001      	adds	r0, #1
 80010d6:	d103      	bne.n	80010e0 <_printf_common+0xac>
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e0:	3501      	adds	r5, #1
 80010e2:	e7c6      	b.n	8001072 <_printf_common+0x3e>
 80010e4:	18e1      	adds	r1, r4, r3
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	2030      	movs	r0, #48	; 0x30
 80010ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80010ee:	4422      	add	r2, r4
 80010f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80010f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80010f8:	3302      	adds	r3, #2
 80010fa:	e7c7      	b.n	800108c <_printf_common+0x58>
 80010fc:	2301      	movs	r3, #1
 80010fe:	4622      	mov	r2, r4
 8001100:	4649      	mov	r1, r9
 8001102:	4638      	mov	r0, r7
 8001104:	47c0      	blx	r8
 8001106:	3001      	adds	r0, #1
 8001108:	d0e6      	beq.n	80010d8 <_printf_common+0xa4>
 800110a:	3601      	adds	r6, #1
 800110c:	e7d9      	b.n	80010c2 <_printf_common+0x8e>
	...

08001110 <_printf_i>:
 8001110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001114:	460c      	mov	r4, r1
 8001116:	4691      	mov	r9, r2
 8001118:	7e27      	ldrb	r7, [r4, #24]
 800111a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800111c:	2f78      	cmp	r7, #120	; 0x78
 800111e:	4680      	mov	r8, r0
 8001120:	469a      	mov	sl, r3
 8001122:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001126:	d807      	bhi.n	8001138 <_printf_i+0x28>
 8001128:	2f62      	cmp	r7, #98	; 0x62
 800112a:	d80a      	bhi.n	8001142 <_printf_i+0x32>
 800112c:	2f00      	cmp	r7, #0
 800112e:	f000 80d8 	beq.w	80012e2 <_printf_i+0x1d2>
 8001132:	2f58      	cmp	r7, #88	; 0x58
 8001134:	f000 80a3 	beq.w	800127e <_printf_i+0x16e>
 8001138:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800113c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001140:	e03a      	b.n	80011b8 <_printf_i+0xa8>
 8001142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001146:	2b15      	cmp	r3, #21
 8001148:	d8f6      	bhi.n	8001138 <_printf_i+0x28>
 800114a:	a001      	add	r0, pc, #4	; (adr r0, 8001150 <_printf_i+0x40>)
 800114c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001150:	080011a9 	.word	0x080011a9
 8001154:	080011bd 	.word	0x080011bd
 8001158:	08001139 	.word	0x08001139
 800115c:	08001139 	.word	0x08001139
 8001160:	08001139 	.word	0x08001139
 8001164:	08001139 	.word	0x08001139
 8001168:	080011bd 	.word	0x080011bd
 800116c:	08001139 	.word	0x08001139
 8001170:	08001139 	.word	0x08001139
 8001174:	08001139 	.word	0x08001139
 8001178:	08001139 	.word	0x08001139
 800117c:	080012c9 	.word	0x080012c9
 8001180:	080011ed 	.word	0x080011ed
 8001184:	080012ab 	.word	0x080012ab
 8001188:	08001139 	.word	0x08001139
 800118c:	08001139 	.word	0x08001139
 8001190:	080012eb 	.word	0x080012eb
 8001194:	08001139 	.word	0x08001139
 8001198:	080011ed 	.word	0x080011ed
 800119c:	08001139 	.word	0x08001139
 80011a0:	08001139 	.word	0x08001139
 80011a4:	080012b3 	.word	0x080012b3
 80011a8:	680b      	ldr	r3, [r1, #0]
 80011aa:	1d1a      	adds	r2, r3, #4
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	600a      	str	r2, [r1, #0]
 80011b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80011b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80011b8:	2301      	movs	r3, #1
 80011ba:	e0a3      	b.n	8001304 <_printf_i+0x1f4>
 80011bc:	6825      	ldr	r5, [r4, #0]
 80011be:	6808      	ldr	r0, [r1, #0]
 80011c0:	062e      	lsls	r6, r5, #24
 80011c2:	f100 0304 	add.w	r3, r0, #4
 80011c6:	d50a      	bpl.n	80011de <_printf_i+0xce>
 80011c8:	6805      	ldr	r5, [r0, #0]
 80011ca:	600b      	str	r3, [r1, #0]
 80011cc:	2d00      	cmp	r5, #0
 80011ce:	da03      	bge.n	80011d8 <_printf_i+0xc8>
 80011d0:	232d      	movs	r3, #45	; 0x2d
 80011d2:	426d      	negs	r5, r5
 80011d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011d8:	485e      	ldr	r0, [pc, #376]	; (8001354 <_printf_i+0x244>)
 80011da:	230a      	movs	r3, #10
 80011dc:	e019      	b.n	8001212 <_printf_i+0x102>
 80011de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80011e2:	6805      	ldr	r5, [r0, #0]
 80011e4:	600b      	str	r3, [r1, #0]
 80011e6:	bf18      	it	ne
 80011e8:	b22d      	sxthne	r5, r5
 80011ea:	e7ef      	b.n	80011cc <_printf_i+0xbc>
 80011ec:	680b      	ldr	r3, [r1, #0]
 80011ee:	6825      	ldr	r5, [r4, #0]
 80011f0:	1d18      	adds	r0, r3, #4
 80011f2:	6008      	str	r0, [r1, #0]
 80011f4:	0628      	lsls	r0, r5, #24
 80011f6:	d501      	bpl.n	80011fc <_printf_i+0xec>
 80011f8:	681d      	ldr	r5, [r3, #0]
 80011fa:	e002      	b.n	8001202 <_printf_i+0xf2>
 80011fc:	0669      	lsls	r1, r5, #25
 80011fe:	d5fb      	bpl.n	80011f8 <_printf_i+0xe8>
 8001200:	881d      	ldrh	r5, [r3, #0]
 8001202:	4854      	ldr	r0, [pc, #336]	; (8001354 <_printf_i+0x244>)
 8001204:	2f6f      	cmp	r7, #111	; 0x6f
 8001206:	bf0c      	ite	eq
 8001208:	2308      	moveq	r3, #8
 800120a:	230a      	movne	r3, #10
 800120c:	2100      	movs	r1, #0
 800120e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001212:	6866      	ldr	r6, [r4, #4]
 8001214:	60a6      	str	r6, [r4, #8]
 8001216:	2e00      	cmp	r6, #0
 8001218:	bfa2      	ittt	ge
 800121a:	6821      	ldrge	r1, [r4, #0]
 800121c:	f021 0104 	bicge.w	r1, r1, #4
 8001220:	6021      	strge	r1, [r4, #0]
 8001222:	b90d      	cbnz	r5, 8001228 <_printf_i+0x118>
 8001224:	2e00      	cmp	r6, #0
 8001226:	d04d      	beq.n	80012c4 <_printf_i+0x1b4>
 8001228:	4616      	mov	r6, r2
 800122a:	fbb5 f1f3 	udiv	r1, r5, r3
 800122e:	fb03 5711 	mls	r7, r3, r1, r5
 8001232:	5dc7      	ldrb	r7, [r0, r7]
 8001234:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001238:	462f      	mov	r7, r5
 800123a:	42bb      	cmp	r3, r7
 800123c:	460d      	mov	r5, r1
 800123e:	d9f4      	bls.n	800122a <_printf_i+0x11a>
 8001240:	2b08      	cmp	r3, #8
 8001242:	d10b      	bne.n	800125c <_printf_i+0x14c>
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	07df      	lsls	r7, r3, #31
 8001248:	d508      	bpl.n	800125c <_printf_i+0x14c>
 800124a:	6923      	ldr	r3, [r4, #16]
 800124c:	6861      	ldr	r1, [r4, #4]
 800124e:	4299      	cmp	r1, r3
 8001250:	bfde      	ittt	le
 8001252:	2330      	movle	r3, #48	; 0x30
 8001254:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001258:	f106 36ff 	addle.w	r6, r6, #4294967295
 800125c:	1b92      	subs	r2, r2, r6
 800125e:	6122      	str	r2, [r4, #16]
 8001260:	f8cd a000 	str.w	sl, [sp]
 8001264:	464b      	mov	r3, r9
 8001266:	aa03      	add	r2, sp, #12
 8001268:	4621      	mov	r1, r4
 800126a:	4640      	mov	r0, r8
 800126c:	f7ff fee2 	bl	8001034 <_printf_common>
 8001270:	3001      	adds	r0, #1
 8001272:	d14c      	bne.n	800130e <_printf_i+0x1fe>
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	b004      	add	sp, #16
 800127a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800127e:	4835      	ldr	r0, [pc, #212]	; (8001354 <_printf_i+0x244>)
 8001280:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	680e      	ldr	r6, [r1, #0]
 8001288:	061f      	lsls	r7, r3, #24
 800128a:	f856 5b04 	ldr.w	r5, [r6], #4
 800128e:	600e      	str	r6, [r1, #0]
 8001290:	d514      	bpl.n	80012bc <_printf_i+0x1ac>
 8001292:	07d9      	lsls	r1, r3, #31
 8001294:	bf44      	itt	mi
 8001296:	f043 0320 	orrmi.w	r3, r3, #32
 800129a:	6023      	strmi	r3, [r4, #0]
 800129c:	b91d      	cbnz	r5, 80012a6 <_printf_i+0x196>
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	f023 0320 	bic.w	r3, r3, #32
 80012a4:	6023      	str	r3, [r4, #0]
 80012a6:	2310      	movs	r3, #16
 80012a8:	e7b0      	b.n	800120c <_printf_i+0xfc>
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	f043 0320 	orr.w	r3, r3, #32
 80012b0:	6023      	str	r3, [r4, #0]
 80012b2:	2378      	movs	r3, #120	; 0x78
 80012b4:	4828      	ldr	r0, [pc, #160]	; (8001358 <_printf_i+0x248>)
 80012b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80012ba:	e7e3      	b.n	8001284 <_printf_i+0x174>
 80012bc:	065e      	lsls	r6, r3, #25
 80012be:	bf48      	it	mi
 80012c0:	b2ad      	uxthmi	r5, r5
 80012c2:	e7e6      	b.n	8001292 <_printf_i+0x182>
 80012c4:	4616      	mov	r6, r2
 80012c6:	e7bb      	b.n	8001240 <_printf_i+0x130>
 80012c8:	680b      	ldr	r3, [r1, #0]
 80012ca:	6826      	ldr	r6, [r4, #0]
 80012cc:	6960      	ldr	r0, [r4, #20]
 80012ce:	1d1d      	adds	r5, r3, #4
 80012d0:	600d      	str	r5, [r1, #0]
 80012d2:	0635      	lsls	r5, r6, #24
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	d501      	bpl.n	80012dc <_printf_i+0x1cc>
 80012d8:	6018      	str	r0, [r3, #0]
 80012da:	e002      	b.n	80012e2 <_printf_i+0x1d2>
 80012dc:	0671      	lsls	r1, r6, #25
 80012de:	d5fb      	bpl.n	80012d8 <_printf_i+0x1c8>
 80012e0:	8018      	strh	r0, [r3, #0]
 80012e2:	2300      	movs	r3, #0
 80012e4:	6123      	str	r3, [r4, #16]
 80012e6:	4616      	mov	r6, r2
 80012e8:	e7ba      	b.n	8001260 <_printf_i+0x150>
 80012ea:	680b      	ldr	r3, [r1, #0]
 80012ec:	1d1a      	adds	r2, r3, #4
 80012ee:	600a      	str	r2, [r1, #0]
 80012f0:	681e      	ldr	r6, [r3, #0]
 80012f2:	6862      	ldr	r2, [r4, #4]
 80012f4:	2100      	movs	r1, #0
 80012f6:	4630      	mov	r0, r6
 80012f8:	f7fe ff72 	bl	80001e0 <memchr>
 80012fc:	b108      	cbz	r0, 8001302 <_printf_i+0x1f2>
 80012fe:	1b80      	subs	r0, r0, r6
 8001300:	6060      	str	r0, [r4, #4]
 8001302:	6863      	ldr	r3, [r4, #4]
 8001304:	6123      	str	r3, [r4, #16]
 8001306:	2300      	movs	r3, #0
 8001308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800130c:	e7a8      	b.n	8001260 <_printf_i+0x150>
 800130e:	6923      	ldr	r3, [r4, #16]
 8001310:	4632      	mov	r2, r6
 8001312:	4649      	mov	r1, r9
 8001314:	4640      	mov	r0, r8
 8001316:	47d0      	blx	sl
 8001318:	3001      	adds	r0, #1
 800131a:	d0ab      	beq.n	8001274 <_printf_i+0x164>
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	079b      	lsls	r3, r3, #30
 8001320:	d413      	bmi.n	800134a <_printf_i+0x23a>
 8001322:	68e0      	ldr	r0, [r4, #12]
 8001324:	9b03      	ldr	r3, [sp, #12]
 8001326:	4298      	cmp	r0, r3
 8001328:	bfb8      	it	lt
 800132a:	4618      	movlt	r0, r3
 800132c:	e7a4      	b.n	8001278 <_printf_i+0x168>
 800132e:	2301      	movs	r3, #1
 8001330:	4632      	mov	r2, r6
 8001332:	4649      	mov	r1, r9
 8001334:	4640      	mov	r0, r8
 8001336:	47d0      	blx	sl
 8001338:	3001      	adds	r0, #1
 800133a:	d09b      	beq.n	8001274 <_printf_i+0x164>
 800133c:	3501      	adds	r5, #1
 800133e:	68e3      	ldr	r3, [r4, #12]
 8001340:	9903      	ldr	r1, [sp, #12]
 8001342:	1a5b      	subs	r3, r3, r1
 8001344:	42ab      	cmp	r3, r5
 8001346:	dcf2      	bgt.n	800132e <_printf_i+0x21e>
 8001348:	e7eb      	b.n	8001322 <_printf_i+0x212>
 800134a:	2500      	movs	r5, #0
 800134c:	f104 0619 	add.w	r6, r4, #25
 8001350:	e7f5      	b.n	800133e <_printf_i+0x22e>
 8001352:	bf00      	nop
 8001354:	08001a45 	.word	0x08001a45
 8001358:	08001a56 	.word	0x08001a56

0800135c <_sbrk_r>:
 800135c:	b538      	push	{r3, r4, r5, lr}
 800135e:	4d06      	ldr	r5, [pc, #24]	; (8001378 <_sbrk_r+0x1c>)
 8001360:	2300      	movs	r3, #0
 8001362:	4604      	mov	r4, r0
 8001364:	4608      	mov	r0, r1
 8001366:	602b      	str	r3, [r5, #0]
 8001368:	f7ff fa78 	bl	800085c <_sbrk>
 800136c:	1c43      	adds	r3, r0, #1
 800136e:	d102      	bne.n	8001376 <_sbrk_r+0x1a>
 8001370:	682b      	ldr	r3, [r5, #0]
 8001372:	b103      	cbz	r3, 8001376 <_sbrk_r+0x1a>
 8001374:	6023      	str	r3, [r4, #0]
 8001376:	bd38      	pop	{r3, r4, r5, pc}
 8001378:	20001398 	.word	0x20001398

0800137c <__sread>:
 800137c:	b510      	push	{r4, lr}
 800137e:	460c      	mov	r4, r1
 8001380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001384:	f000 fab4 	bl	80018f0 <_read_r>
 8001388:	2800      	cmp	r0, #0
 800138a:	bfab      	itete	ge
 800138c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800138e:	89a3      	ldrhlt	r3, [r4, #12]
 8001390:	181b      	addge	r3, r3, r0
 8001392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001396:	bfac      	ite	ge
 8001398:	6563      	strge	r3, [r4, #84]	; 0x54
 800139a:	81a3      	strhlt	r3, [r4, #12]
 800139c:	bd10      	pop	{r4, pc}

0800139e <__swrite>:
 800139e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013a2:	461f      	mov	r7, r3
 80013a4:	898b      	ldrh	r3, [r1, #12]
 80013a6:	05db      	lsls	r3, r3, #23
 80013a8:	4605      	mov	r5, r0
 80013aa:	460c      	mov	r4, r1
 80013ac:	4616      	mov	r6, r2
 80013ae:	d505      	bpl.n	80013bc <__swrite+0x1e>
 80013b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013b4:	2302      	movs	r3, #2
 80013b6:	2200      	movs	r2, #0
 80013b8:	f000 f9c8 	bl	800174c <_lseek_r>
 80013bc:	89a3      	ldrh	r3, [r4, #12]
 80013be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013c6:	81a3      	strh	r3, [r4, #12]
 80013c8:	4632      	mov	r2, r6
 80013ca:	463b      	mov	r3, r7
 80013cc:	4628      	mov	r0, r5
 80013ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80013d2:	f000 b869 	b.w	80014a8 <_write_r>

080013d6 <__sseek>:
 80013d6:	b510      	push	{r4, lr}
 80013d8:	460c      	mov	r4, r1
 80013da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013de:	f000 f9b5 	bl	800174c <_lseek_r>
 80013e2:	1c43      	adds	r3, r0, #1
 80013e4:	89a3      	ldrh	r3, [r4, #12]
 80013e6:	bf15      	itete	ne
 80013e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80013ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80013ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80013f2:	81a3      	strheq	r3, [r4, #12]
 80013f4:	bf18      	it	ne
 80013f6:	81a3      	strhne	r3, [r4, #12]
 80013f8:	bd10      	pop	{r4, pc}

080013fa <__sclose>:
 80013fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013fe:	f000 b8d3 	b.w	80015a8 <_close_r>
	...

08001404 <__swbuf_r>:
 8001404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001406:	460e      	mov	r6, r1
 8001408:	4614      	mov	r4, r2
 800140a:	4605      	mov	r5, r0
 800140c:	b118      	cbz	r0, 8001416 <__swbuf_r+0x12>
 800140e:	6983      	ldr	r3, [r0, #24]
 8001410:	b90b      	cbnz	r3, 8001416 <__swbuf_r+0x12>
 8001412:	f7ff fbbb 	bl	8000b8c <__sinit>
 8001416:	4b21      	ldr	r3, [pc, #132]	; (800149c <__swbuf_r+0x98>)
 8001418:	429c      	cmp	r4, r3
 800141a:	d12b      	bne.n	8001474 <__swbuf_r+0x70>
 800141c:	686c      	ldr	r4, [r5, #4]
 800141e:	69a3      	ldr	r3, [r4, #24]
 8001420:	60a3      	str	r3, [r4, #8]
 8001422:	89a3      	ldrh	r3, [r4, #12]
 8001424:	071a      	lsls	r2, r3, #28
 8001426:	d52f      	bpl.n	8001488 <__swbuf_r+0x84>
 8001428:	6923      	ldr	r3, [r4, #16]
 800142a:	b36b      	cbz	r3, 8001488 <__swbuf_r+0x84>
 800142c:	6923      	ldr	r3, [r4, #16]
 800142e:	6820      	ldr	r0, [r4, #0]
 8001430:	1ac0      	subs	r0, r0, r3
 8001432:	6963      	ldr	r3, [r4, #20]
 8001434:	b2f6      	uxtb	r6, r6
 8001436:	4283      	cmp	r3, r0
 8001438:	4637      	mov	r7, r6
 800143a:	dc04      	bgt.n	8001446 <__swbuf_r+0x42>
 800143c:	4621      	mov	r1, r4
 800143e:	4628      	mov	r0, r5
 8001440:	f000 f948 	bl	80016d4 <_fflush_r>
 8001444:	bb30      	cbnz	r0, 8001494 <__swbuf_r+0x90>
 8001446:	68a3      	ldr	r3, [r4, #8]
 8001448:	3b01      	subs	r3, #1
 800144a:	60a3      	str	r3, [r4, #8]
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	6022      	str	r2, [r4, #0]
 8001452:	701e      	strb	r6, [r3, #0]
 8001454:	6963      	ldr	r3, [r4, #20]
 8001456:	3001      	adds	r0, #1
 8001458:	4283      	cmp	r3, r0
 800145a:	d004      	beq.n	8001466 <__swbuf_r+0x62>
 800145c:	89a3      	ldrh	r3, [r4, #12]
 800145e:	07db      	lsls	r3, r3, #31
 8001460:	d506      	bpl.n	8001470 <__swbuf_r+0x6c>
 8001462:	2e0a      	cmp	r6, #10
 8001464:	d104      	bne.n	8001470 <__swbuf_r+0x6c>
 8001466:	4621      	mov	r1, r4
 8001468:	4628      	mov	r0, r5
 800146a:	f000 f933 	bl	80016d4 <_fflush_r>
 800146e:	b988      	cbnz	r0, 8001494 <__swbuf_r+0x90>
 8001470:	4638      	mov	r0, r7
 8001472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <__swbuf_r+0x9c>)
 8001476:	429c      	cmp	r4, r3
 8001478:	d101      	bne.n	800147e <__swbuf_r+0x7a>
 800147a:	68ac      	ldr	r4, [r5, #8]
 800147c:	e7cf      	b.n	800141e <__swbuf_r+0x1a>
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <__swbuf_r+0xa0>)
 8001480:	429c      	cmp	r4, r3
 8001482:	bf08      	it	eq
 8001484:	68ec      	ldreq	r4, [r5, #12]
 8001486:	e7ca      	b.n	800141e <__swbuf_r+0x1a>
 8001488:	4621      	mov	r1, r4
 800148a:	4628      	mov	r0, r5
 800148c:	f000 f81e 	bl	80014cc <__swsetup_r>
 8001490:	2800      	cmp	r0, #0
 8001492:	d0cb      	beq.n	800142c <__swbuf_r+0x28>
 8001494:	f04f 37ff 	mov.w	r7, #4294967295
 8001498:	e7ea      	b.n	8001470 <__swbuf_r+0x6c>
 800149a:	bf00      	nop
 800149c:	080019f4 	.word	0x080019f4
 80014a0:	08001a14 	.word	0x08001a14
 80014a4:	080019d4 	.word	0x080019d4

080014a8 <_write_r>:
 80014a8:	b538      	push	{r3, r4, r5, lr}
 80014aa:	4d07      	ldr	r5, [pc, #28]	; (80014c8 <_write_r+0x20>)
 80014ac:	4604      	mov	r4, r0
 80014ae:	4608      	mov	r0, r1
 80014b0:	4611      	mov	r1, r2
 80014b2:	2200      	movs	r2, #0
 80014b4:	602a      	str	r2, [r5, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	f7ff f97f 	bl	80007ba <_write>
 80014bc:	1c43      	adds	r3, r0, #1
 80014be:	d102      	bne.n	80014c6 <_write_r+0x1e>
 80014c0:	682b      	ldr	r3, [r5, #0]
 80014c2:	b103      	cbz	r3, 80014c6 <_write_r+0x1e>
 80014c4:	6023      	str	r3, [r4, #0]
 80014c6:	bd38      	pop	{r3, r4, r5, pc}
 80014c8:	20001398 	.word	0x20001398

080014cc <__swsetup_r>:
 80014cc:	4b32      	ldr	r3, [pc, #200]	; (8001598 <__swsetup_r+0xcc>)
 80014ce:	b570      	push	{r4, r5, r6, lr}
 80014d0:	681d      	ldr	r5, [r3, #0]
 80014d2:	4606      	mov	r6, r0
 80014d4:	460c      	mov	r4, r1
 80014d6:	b125      	cbz	r5, 80014e2 <__swsetup_r+0x16>
 80014d8:	69ab      	ldr	r3, [r5, #24]
 80014da:	b913      	cbnz	r3, 80014e2 <__swsetup_r+0x16>
 80014dc:	4628      	mov	r0, r5
 80014de:	f7ff fb55 	bl	8000b8c <__sinit>
 80014e2:	4b2e      	ldr	r3, [pc, #184]	; (800159c <__swsetup_r+0xd0>)
 80014e4:	429c      	cmp	r4, r3
 80014e6:	d10f      	bne.n	8001508 <__swsetup_r+0x3c>
 80014e8:	686c      	ldr	r4, [r5, #4]
 80014ea:	89a3      	ldrh	r3, [r4, #12]
 80014ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014f0:	0719      	lsls	r1, r3, #28
 80014f2:	d42c      	bmi.n	800154e <__swsetup_r+0x82>
 80014f4:	06dd      	lsls	r5, r3, #27
 80014f6:	d411      	bmi.n	800151c <__swsetup_r+0x50>
 80014f8:	2309      	movs	r3, #9
 80014fa:	6033      	str	r3, [r6, #0]
 80014fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001500:	81a3      	strh	r3, [r4, #12]
 8001502:	f04f 30ff 	mov.w	r0, #4294967295
 8001506:	e03e      	b.n	8001586 <__swsetup_r+0xba>
 8001508:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <__swsetup_r+0xd4>)
 800150a:	429c      	cmp	r4, r3
 800150c:	d101      	bne.n	8001512 <__swsetup_r+0x46>
 800150e:	68ac      	ldr	r4, [r5, #8]
 8001510:	e7eb      	b.n	80014ea <__swsetup_r+0x1e>
 8001512:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <__swsetup_r+0xd8>)
 8001514:	429c      	cmp	r4, r3
 8001516:	bf08      	it	eq
 8001518:	68ec      	ldreq	r4, [r5, #12]
 800151a:	e7e6      	b.n	80014ea <__swsetup_r+0x1e>
 800151c:	0758      	lsls	r0, r3, #29
 800151e:	d512      	bpl.n	8001546 <__swsetup_r+0x7a>
 8001520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001522:	b141      	cbz	r1, 8001536 <__swsetup_r+0x6a>
 8001524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001528:	4299      	cmp	r1, r3
 800152a:	d002      	beq.n	8001532 <__swsetup_r+0x66>
 800152c:	4630      	mov	r0, r6
 800152e:	f000 f98f 	bl	8001850 <_free_r>
 8001532:	2300      	movs	r3, #0
 8001534:	6363      	str	r3, [r4, #52]	; 0x34
 8001536:	89a3      	ldrh	r3, [r4, #12]
 8001538:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800153c:	81a3      	strh	r3, [r4, #12]
 800153e:	2300      	movs	r3, #0
 8001540:	6063      	str	r3, [r4, #4]
 8001542:	6923      	ldr	r3, [r4, #16]
 8001544:	6023      	str	r3, [r4, #0]
 8001546:	89a3      	ldrh	r3, [r4, #12]
 8001548:	f043 0308 	orr.w	r3, r3, #8
 800154c:	81a3      	strh	r3, [r4, #12]
 800154e:	6923      	ldr	r3, [r4, #16]
 8001550:	b94b      	cbnz	r3, 8001566 <__swsetup_r+0x9a>
 8001552:	89a3      	ldrh	r3, [r4, #12]
 8001554:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800155c:	d003      	beq.n	8001566 <__swsetup_r+0x9a>
 800155e:	4621      	mov	r1, r4
 8001560:	4630      	mov	r0, r6
 8001562:	f000 f929 	bl	80017b8 <__smakebuf_r>
 8001566:	89a0      	ldrh	r0, [r4, #12]
 8001568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800156c:	f010 0301 	ands.w	r3, r0, #1
 8001570:	d00a      	beq.n	8001588 <__swsetup_r+0xbc>
 8001572:	2300      	movs	r3, #0
 8001574:	60a3      	str	r3, [r4, #8]
 8001576:	6963      	ldr	r3, [r4, #20]
 8001578:	425b      	negs	r3, r3
 800157a:	61a3      	str	r3, [r4, #24]
 800157c:	6923      	ldr	r3, [r4, #16]
 800157e:	b943      	cbnz	r3, 8001592 <__swsetup_r+0xc6>
 8001580:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001584:	d1ba      	bne.n	80014fc <__swsetup_r+0x30>
 8001586:	bd70      	pop	{r4, r5, r6, pc}
 8001588:	0781      	lsls	r1, r0, #30
 800158a:	bf58      	it	pl
 800158c:	6963      	ldrpl	r3, [r4, #20]
 800158e:	60a3      	str	r3, [r4, #8]
 8001590:	e7f4      	b.n	800157c <__swsetup_r+0xb0>
 8001592:	2000      	movs	r0, #0
 8001594:	e7f7      	b.n	8001586 <__swsetup_r+0xba>
 8001596:	bf00      	nop
 8001598:	20000000 	.word	0x20000000
 800159c:	080019f4 	.word	0x080019f4
 80015a0:	08001a14 	.word	0x08001a14
 80015a4:	080019d4 	.word	0x080019d4

080015a8 <_close_r>:
 80015a8:	b538      	push	{r3, r4, r5, lr}
 80015aa:	4d06      	ldr	r5, [pc, #24]	; (80015c4 <_close_r+0x1c>)
 80015ac:	2300      	movs	r3, #0
 80015ae:	4604      	mov	r4, r0
 80015b0:	4608      	mov	r0, r1
 80015b2:	602b      	str	r3, [r5, #0]
 80015b4:	f7ff f91d 	bl	80007f2 <_close>
 80015b8:	1c43      	adds	r3, r0, #1
 80015ba:	d102      	bne.n	80015c2 <_close_r+0x1a>
 80015bc:	682b      	ldr	r3, [r5, #0]
 80015be:	b103      	cbz	r3, 80015c2 <_close_r+0x1a>
 80015c0:	6023      	str	r3, [r4, #0]
 80015c2:	bd38      	pop	{r3, r4, r5, pc}
 80015c4:	20001398 	.word	0x20001398

080015c8 <__sflush_r>:
 80015c8:	898a      	ldrh	r2, [r1, #12]
 80015ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015ce:	4605      	mov	r5, r0
 80015d0:	0710      	lsls	r0, r2, #28
 80015d2:	460c      	mov	r4, r1
 80015d4:	d458      	bmi.n	8001688 <__sflush_r+0xc0>
 80015d6:	684b      	ldr	r3, [r1, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	dc05      	bgt.n	80015e8 <__sflush_r+0x20>
 80015dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80015de:	2b00      	cmp	r3, #0
 80015e0:	dc02      	bgt.n	80015e8 <__sflush_r+0x20>
 80015e2:	2000      	movs	r0, #0
 80015e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015ea:	2e00      	cmp	r6, #0
 80015ec:	d0f9      	beq.n	80015e2 <__sflush_r+0x1a>
 80015ee:	2300      	movs	r3, #0
 80015f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80015f4:	682f      	ldr	r7, [r5, #0]
 80015f6:	602b      	str	r3, [r5, #0]
 80015f8:	d032      	beq.n	8001660 <__sflush_r+0x98>
 80015fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80015fc:	89a3      	ldrh	r3, [r4, #12]
 80015fe:	075a      	lsls	r2, r3, #29
 8001600:	d505      	bpl.n	800160e <__sflush_r+0x46>
 8001602:	6863      	ldr	r3, [r4, #4]
 8001604:	1ac0      	subs	r0, r0, r3
 8001606:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001608:	b10b      	cbz	r3, 800160e <__sflush_r+0x46>
 800160a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800160c:	1ac0      	subs	r0, r0, r3
 800160e:	2300      	movs	r3, #0
 8001610:	4602      	mov	r2, r0
 8001612:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001614:	6a21      	ldr	r1, [r4, #32]
 8001616:	4628      	mov	r0, r5
 8001618:	47b0      	blx	r6
 800161a:	1c43      	adds	r3, r0, #1
 800161c:	89a3      	ldrh	r3, [r4, #12]
 800161e:	d106      	bne.n	800162e <__sflush_r+0x66>
 8001620:	6829      	ldr	r1, [r5, #0]
 8001622:	291d      	cmp	r1, #29
 8001624:	d82c      	bhi.n	8001680 <__sflush_r+0xb8>
 8001626:	4a2a      	ldr	r2, [pc, #168]	; (80016d0 <__sflush_r+0x108>)
 8001628:	40ca      	lsrs	r2, r1
 800162a:	07d6      	lsls	r6, r2, #31
 800162c:	d528      	bpl.n	8001680 <__sflush_r+0xb8>
 800162e:	2200      	movs	r2, #0
 8001630:	6062      	str	r2, [r4, #4]
 8001632:	04d9      	lsls	r1, r3, #19
 8001634:	6922      	ldr	r2, [r4, #16]
 8001636:	6022      	str	r2, [r4, #0]
 8001638:	d504      	bpl.n	8001644 <__sflush_r+0x7c>
 800163a:	1c42      	adds	r2, r0, #1
 800163c:	d101      	bne.n	8001642 <__sflush_r+0x7a>
 800163e:	682b      	ldr	r3, [r5, #0]
 8001640:	b903      	cbnz	r3, 8001644 <__sflush_r+0x7c>
 8001642:	6560      	str	r0, [r4, #84]	; 0x54
 8001644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001646:	602f      	str	r7, [r5, #0]
 8001648:	2900      	cmp	r1, #0
 800164a:	d0ca      	beq.n	80015e2 <__sflush_r+0x1a>
 800164c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001650:	4299      	cmp	r1, r3
 8001652:	d002      	beq.n	800165a <__sflush_r+0x92>
 8001654:	4628      	mov	r0, r5
 8001656:	f000 f8fb 	bl	8001850 <_free_r>
 800165a:	2000      	movs	r0, #0
 800165c:	6360      	str	r0, [r4, #52]	; 0x34
 800165e:	e7c1      	b.n	80015e4 <__sflush_r+0x1c>
 8001660:	6a21      	ldr	r1, [r4, #32]
 8001662:	2301      	movs	r3, #1
 8001664:	4628      	mov	r0, r5
 8001666:	47b0      	blx	r6
 8001668:	1c41      	adds	r1, r0, #1
 800166a:	d1c7      	bne.n	80015fc <__sflush_r+0x34>
 800166c:	682b      	ldr	r3, [r5, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0c4      	beq.n	80015fc <__sflush_r+0x34>
 8001672:	2b1d      	cmp	r3, #29
 8001674:	d001      	beq.n	800167a <__sflush_r+0xb2>
 8001676:	2b16      	cmp	r3, #22
 8001678:	d101      	bne.n	800167e <__sflush_r+0xb6>
 800167a:	602f      	str	r7, [r5, #0]
 800167c:	e7b1      	b.n	80015e2 <__sflush_r+0x1a>
 800167e:	89a3      	ldrh	r3, [r4, #12]
 8001680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001684:	81a3      	strh	r3, [r4, #12]
 8001686:	e7ad      	b.n	80015e4 <__sflush_r+0x1c>
 8001688:	690f      	ldr	r7, [r1, #16]
 800168a:	2f00      	cmp	r7, #0
 800168c:	d0a9      	beq.n	80015e2 <__sflush_r+0x1a>
 800168e:	0793      	lsls	r3, r2, #30
 8001690:	680e      	ldr	r6, [r1, #0]
 8001692:	bf08      	it	eq
 8001694:	694b      	ldreq	r3, [r1, #20]
 8001696:	600f      	str	r7, [r1, #0]
 8001698:	bf18      	it	ne
 800169a:	2300      	movne	r3, #0
 800169c:	eba6 0807 	sub.w	r8, r6, r7
 80016a0:	608b      	str	r3, [r1, #8]
 80016a2:	f1b8 0f00 	cmp.w	r8, #0
 80016a6:	dd9c      	ble.n	80015e2 <__sflush_r+0x1a>
 80016a8:	6a21      	ldr	r1, [r4, #32]
 80016aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80016ac:	4643      	mov	r3, r8
 80016ae:	463a      	mov	r2, r7
 80016b0:	4628      	mov	r0, r5
 80016b2:	47b0      	blx	r6
 80016b4:	2800      	cmp	r0, #0
 80016b6:	dc06      	bgt.n	80016c6 <__sflush_r+0xfe>
 80016b8:	89a3      	ldrh	r3, [r4, #12]
 80016ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016be:	81a3      	strh	r3, [r4, #12]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	e78e      	b.n	80015e4 <__sflush_r+0x1c>
 80016c6:	4407      	add	r7, r0
 80016c8:	eba8 0800 	sub.w	r8, r8, r0
 80016cc:	e7e9      	b.n	80016a2 <__sflush_r+0xda>
 80016ce:	bf00      	nop
 80016d0:	20400001 	.word	0x20400001

080016d4 <_fflush_r>:
 80016d4:	b538      	push	{r3, r4, r5, lr}
 80016d6:	690b      	ldr	r3, [r1, #16]
 80016d8:	4605      	mov	r5, r0
 80016da:	460c      	mov	r4, r1
 80016dc:	b913      	cbnz	r3, 80016e4 <_fflush_r+0x10>
 80016de:	2500      	movs	r5, #0
 80016e0:	4628      	mov	r0, r5
 80016e2:	bd38      	pop	{r3, r4, r5, pc}
 80016e4:	b118      	cbz	r0, 80016ee <_fflush_r+0x1a>
 80016e6:	6983      	ldr	r3, [r0, #24]
 80016e8:	b90b      	cbnz	r3, 80016ee <_fflush_r+0x1a>
 80016ea:	f7ff fa4f 	bl	8000b8c <__sinit>
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <_fflush_r+0x6c>)
 80016f0:	429c      	cmp	r4, r3
 80016f2:	d11b      	bne.n	800172c <_fflush_r+0x58>
 80016f4:	686c      	ldr	r4, [r5, #4]
 80016f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0ef      	beq.n	80016de <_fflush_r+0xa>
 80016fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001700:	07d0      	lsls	r0, r2, #31
 8001702:	d404      	bmi.n	800170e <_fflush_r+0x3a>
 8001704:	0599      	lsls	r1, r3, #22
 8001706:	d402      	bmi.n	800170e <_fflush_r+0x3a>
 8001708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800170a:	f7ff fadd 	bl	8000cc8 <__retarget_lock_acquire_recursive>
 800170e:	4628      	mov	r0, r5
 8001710:	4621      	mov	r1, r4
 8001712:	f7ff ff59 	bl	80015c8 <__sflush_r>
 8001716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001718:	07da      	lsls	r2, r3, #31
 800171a:	4605      	mov	r5, r0
 800171c:	d4e0      	bmi.n	80016e0 <_fflush_r+0xc>
 800171e:	89a3      	ldrh	r3, [r4, #12]
 8001720:	059b      	lsls	r3, r3, #22
 8001722:	d4dd      	bmi.n	80016e0 <_fflush_r+0xc>
 8001724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001726:	f7ff fad0 	bl	8000cca <__retarget_lock_release_recursive>
 800172a:	e7d9      	b.n	80016e0 <_fflush_r+0xc>
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <_fflush_r+0x70>)
 800172e:	429c      	cmp	r4, r3
 8001730:	d101      	bne.n	8001736 <_fflush_r+0x62>
 8001732:	68ac      	ldr	r4, [r5, #8]
 8001734:	e7df      	b.n	80016f6 <_fflush_r+0x22>
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <_fflush_r+0x74>)
 8001738:	429c      	cmp	r4, r3
 800173a:	bf08      	it	eq
 800173c:	68ec      	ldreq	r4, [r5, #12]
 800173e:	e7da      	b.n	80016f6 <_fflush_r+0x22>
 8001740:	080019f4 	.word	0x080019f4
 8001744:	08001a14 	.word	0x08001a14
 8001748:	080019d4 	.word	0x080019d4

0800174c <_lseek_r>:
 800174c:	b538      	push	{r3, r4, r5, lr}
 800174e:	4d07      	ldr	r5, [pc, #28]	; (800176c <_lseek_r+0x20>)
 8001750:	4604      	mov	r4, r0
 8001752:	4608      	mov	r0, r1
 8001754:	4611      	mov	r1, r2
 8001756:	2200      	movs	r2, #0
 8001758:	602a      	str	r2, [r5, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	f7ff f870 	bl	8000840 <_lseek>
 8001760:	1c43      	adds	r3, r0, #1
 8001762:	d102      	bne.n	800176a <_lseek_r+0x1e>
 8001764:	682b      	ldr	r3, [r5, #0]
 8001766:	b103      	cbz	r3, 800176a <_lseek_r+0x1e>
 8001768:	6023      	str	r3, [r4, #0]
 800176a:	bd38      	pop	{r3, r4, r5, pc}
 800176c:	20001398 	.word	0x20001398

08001770 <__swhatbuf_r>:
 8001770:	b570      	push	{r4, r5, r6, lr}
 8001772:	460e      	mov	r6, r1
 8001774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001778:	2900      	cmp	r1, #0
 800177a:	b096      	sub	sp, #88	; 0x58
 800177c:	4614      	mov	r4, r2
 800177e:	461d      	mov	r5, r3
 8001780:	da07      	bge.n	8001792 <__swhatbuf_r+0x22>
 8001782:	2300      	movs	r3, #0
 8001784:	602b      	str	r3, [r5, #0]
 8001786:	89b3      	ldrh	r3, [r6, #12]
 8001788:	061a      	lsls	r2, r3, #24
 800178a:	d410      	bmi.n	80017ae <__swhatbuf_r+0x3e>
 800178c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001790:	e00e      	b.n	80017b0 <__swhatbuf_r+0x40>
 8001792:	466a      	mov	r2, sp
 8001794:	f000 f8be 	bl	8001914 <_fstat_r>
 8001798:	2800      	cmp	r0, #0
 800179a:	dbf2      	blt.n	8001782 <__swhatbuf_r+0x12>
 800179c:	9a01      	ldr	r2, [sp, #4]
 800179e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80017a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80017a6:	425a      	negs	r2, r3
 80017a8:	415a      	adcs	r2, r3
 80017aa:	602a      	str	r2, [r5, #0]
 80017ac:	e7ee      	b.n	800178c <__swhatbuf_r+0x1c>
 80017ae:	2340      	movs	r3, #64	; 0x40
 80017b0:	2000      	movs	r0, #0
 80017b2:	6023      	str	r3, [r4, #0]
 80017b4:	b016      	add	sp, #88	; 0x58
 80017b6:	bd70      	pop	{r4, r5, r6, pc}

080017b8 <__smakebuf_r>:
 80017b8:	898b      	ldrh	r3, [r1, #12]
 80017ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80017bc:	079d      	lsls	r5, r3, #30
 80017be:	4606      	mov	r6, r0
 80017c0:	460c      	mov	r4, r1
 80017c2:	d507      	bpl.n	80017d4 <__smakebuf_r+0x1c>
 80017c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80017c8:	6023      	str	r3, [r4, #0]
 80017ca:	6123      	str	r3, [r4, #16]
 80017cc:	2301      	movs	r3, #1
 80017ce:	6163      	str	r3, [r4, #20]
 80017d0:	b002      	add	sp, #8
 80017d2:	bd70      	pop	{r4, r5, r6, pc}
 80017d4:	ab01      	add	r3, sp, #4
 80017d6:	466a      	mov	r2, sp
 80017d8:	f7ff ffca 	bl	8001770 <__swhatbuf_r>
 80017dc:	9900      	ldr	r1, [sp, #0]
 80017de:	4605      	mov	r5, r0
 80017e0:	4630      	mov	r0, r6
 80017e2:	f7ff fa73 	bl	8000ccc <_malloc_r>
 80017e6:	b948      	cbnz	r0, 80017fc <__smakebuf_r+0x44>
 80017e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017ec:	059a      	lsls	r2, r3, #22
 80017ee:	d4ef      	bmi.n	80017d0 <__smakebuf_r+0x18>
 80017f0:	f023 0303 	bic.w	r3, r3, #3
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	81a3      	strh	r3, [r4, #12]
 80017fa:	e7e3      	b.n	80017c4 <__smakebuf_r+0xc>
 80017fc:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <__smakebuf_r+0x7c>)
 80017fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8001800:	89a3      	ldrh	r3, [r4, #12]
 8001802:	6020      	str	r0, [r4, #0]
 8001804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001808:	81a3      	strh	r3, [r4, #12]
 800180a:	9b00      	ldr	r3, [sp, #0]
 800180c:	6163      	str	r3, [r4, #20]
 800180e:	9b01      	ldr	r3, [sp, #4]
 8001810:	6120      	str	r0, [r4, #16]
 8001812:	b15b      	cbz	r3, 800182c <__smakebuf_r+0x74>
 8001814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001818:	4630      	mov	r0, r6
 800181a:	f000 f88d 	bl	8001938 <_isatty_r>
 800181e:	b128      	cbz	r0, 800182c <__smakebuf_r+0x74>
 8001820:	89a3      	ldrh	r3, [r4, #12]
 8001822:	f023 0303 	bic.w	r3, r3, #3
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	81a3      	strh	r3, [r4, #12]
 800182c:	89a0      	ldrh	r0, [r4, #12]
 800182e:	4305      	orrs	r5, r0
 8001830:	81a5      	strh	r5, [r4, #12]
 8001832:	e7cd      	b.n	80017d0 <__smakebuf_r+0x18>
 8001834:	08000b25 	.word	0x08000b25

08001838 <__malloc_lock>:
 8001838:	4801      	ldr	r0, [pc, #4]	; (8001840 <__malloc_lock+0x8>)
 800183a:	f7ff ba45 	b.w	8000cc8 <__retarget_lock_acquire_recursive>
 800183e:	bf00      	nop
 8001840:	20001390 	.word	0x20001390

08001844 <__malloc_unlock>:
 8001844:	4801      	ldr	r0, [pc, #4]	; (800184c <__malloc_unlock+0x8>)
 8001846:	f7ff ba40 	b.w	8000cca <__retarget_lock_release_recursive>
 800184a:	bf00      	nop
 800184c:	20001390 	.word	0x20001390

08001850 <_free_r>:
 8001850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001852:	2900      	cmp	r1, #0
 8001854:	d048      	beq.n	80018e8 <_free_r+0x98>
 8001856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800185a:	9001      	str	r0, [sp, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	f1a1 0404 	sub.w	r4, r1, #4
 8001862:	bfb8      	it	lt
 8001864:	18e4      	addlt	r4, r4, r3
 8001866:	f7ff ffe7 	bl	8001838 <__malloc_lock>
 800186a:	4a20      	ldr	r2, [pc, #128]	; (80018ec <_free_r+0x9c>)
 800186c:	9801      	ldr	r0, [sp, #4]
 800186e:	6813      	ldr	r3, [r2, #0]
 8001870:	4615      	mov	r5, r2
 8001872:	b933      	cbnz	r3, 8001882 <_free_r+0x32>
 8001874:	6063      	str	r3, [r4, #4]
 8001876:	6014      	str	r4, [r2, #0]
 8001878:	b003      	add	sp, #12
 800187a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800187e:	f7ff bfe1 	b.w	8001844 <__malloc_unlock>
 8001882:	42a3      	cmp	r3, r4
 8001884:	d90b      	bls.n	800189e <_free_r+0x4e>
 8001886:	6821      	ldr	r1, [r4, #0]
 8001888:	1862      	adds	r2, r4, r1
 800188a:	4293      	cmp	r3, r2
 800188c:	bf04      	itt	eq
 800188e:	681a      	ldreq	r2, [r3, #0]
 8001890:	685b      	ldreq	r3, [r3, #4]
 8001892:	6063      	str	r3, [r4, #4]
 8001894:	bf04      	itt	eq
 8001896:	1852      	addeq	r2, r2, r1
 8001898:	6022      	streq	r2, [r4, #0]
 800189a:	602c      	str	r4, [r5, #0]
 800189c:	e7ec      	b.n	8001878 <_free_r+0x28>
 800189e:	461a      	mov	r2, r3
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	b10b      	cbz	r3, 80018a8 <_free_r+0x58>
 80018a4:	42a3      	cmp	r3, r4
 80018a6:	d9fa      	bls.n	800189e <_free_r+0x4e>
 80018a8:	6811      	ldr	r1, [r2, #0]
 80018aa:	1855      	adds	r5, r2, r1
 80018ac:	42a5      	cmp	r5, r4
 80018ae:	d10b      	bne.n	80018c8 <_free_r+0x78>
 80018b0:	6824      	ldr	r4, [r4, #0]
 80018b2:	4421      	add	r1, r4
 80018b4:	1854      	adds	r4, r2, r1
 80018b6:	42a3      	cmp	r3, r4
 80018b8:	6011      	str	r1, [r2, #0]
 80018ba:	d1dd      	bne.n	8001878 <_free_r+0x28>
 80018bc:	681c      	ldr	r4, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	6053      	str	r3, [r2, #4]
 80018c2:	4421      	add	r1, r4
 80018c4:	6011      	str	r1, [r2, #0]
 80018c6:	e7d7      	b.n	8001878 <_free_r+0x28>
 80018c8:	d902      	bls.n	80018d0 <_free_r+0x80>
 80018ca:	230c      	movs	r3, #12
 80018cc:	6003      	str	r3, [r0, #0]
 80018ce:	e7d3      	b.n	8001878 <_free_r+0x28>
 80018d0:	6825      	ldr	r5, [r4, #0]
 80018d2:	1961      	adds	r1, r4, r5
 80018d4:	428b      	cmp	r3, r1
 80018d6:	bf04      	itt	eq
 80018d8:	6819      	ldreq	r1, [r3, #0]
 80018da:	685b      	ldreq	r3, [r3, #4]
 80018dc:	6063      	str	r3, [r4, #4]
 80018de:	bf04      	itt	eq
 80018e0:	1949      	addeq	r1, r1, r5
 80018e2:	6021      	streq	r1, [r4, #0]
 80018e4:	6054      	str	r4, [r2, #4]
 80018e6:	e7c7      	b.n	8001878 <_free_r+0x28>
 80018e8:	b003      	add	sp, #12
 80018ea:	bd30      	pop	{r4, r5, pc}
 80018ec:	20000084 	.word	0x20000084

080018f0 <_read_r>:
 80018f0:	b538      	push	{r3, r4, r5, lr}
 80018f2:	4d07      	ldr	r5, [pc, #28]	; (8001910 <_read_r+0x20>)
 80018f4:	4604      	mov	r4, r0
 80018f6:	4608      	mov	r0, r1
 80018f8:	4611      	mov	r1, r2
 80018fa:	2200      	movs	r2, #0
 80018fc:	602a      	str	r2, [r5, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	f7fe ff3e 	bl	8000780 <_read>
 8001904:	1c43      	adds	r3, r0, #1
 8001906:	d102      	bne.n	800190e <_read_r+0x1e>
 8001908:	682b      	ldr	r3, [r5, #0]
 800190a:	b103      	cbz	r3, 800190e <_read_r+0x1e>
 800190c:	6023      	str	r3, [r4, #0]
 800190e:	bd38      	pop	{r3, r4, r5, pc}
 8001910:	20001398 	.word	0x20001398

08001914 <_fstat_r>:
 8001914:	b538      	push	{r3, r4, r5, lr}
 8001916:	4d07      	ldr	r5, [pc, #28]	; (8001934 <_fstat_r+0x20>)
 8001918:	2300      	movs	r3, #0
 800191a:	4604      	mov	r4, r0
 800191c:	4608      	mov	r0, r1
 800191e:	4611      	mov	r1, r2
 8001920:	602b      	str	r3, [r5, #0]
 8001922:	f7fe ff72 	bl	800080a <_fstat>
 8001926:	1c43      	adds	r3, r0, #1
 8001928:	d102      	bne.n	8001930 <_fstat_r+0x1c>
 800192a:	682b      	ldr	r3, [r5, #0]
 800192c:	b103      	cbz	r3, 8001930 <_fstat_r+0x1c>
 800192e:	6023      	str	r3, [r4, #0]
 8001930:	bd38      	pop	{r3, r4, r5, pc}
 8001932:	bf00      	nop
 8001934:	20001398 	.word	0x20001398

08001938 <_isatty_r>:
 8001938:	b538      	push	{r3, r4, r5, lr}
 800193a:	4d06      	ldr	r5, [pc, #24]	; (8001954 <_isatty_r+0x1c>)
 800193c:	2300      	movs	r3, #0
 800193e:	4604      	mov	r4, r0
 8001940:	4608      	mov	r0, r1
 8001942:	602b      	str	r3, [r5, #0]
 8001944:	f7fe ff71 	bl	800082a <_isatty>
 8001948:	1c43      	adds	r3, r0, #1
 800194a:	d102      	bne.n	8001952 <_isatty_r+0x1a>
 800194c:	682b      	ldr	r3, [r5, #0]
 800194e:	b103      	cbz	r3, 8001952 <_isatty_r+0x1a>
 8001950:	6023      	str	r3, [r4, #0]
 8001952:	bd38      	pop	{r3, r4, r5, pc}
 8001954:	20001398 	.word	0x20001398

08001958 <_init>:
 8001958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195a:	bf00      	nop
 800195c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800195e:	bc08      	pop	{r3}
 8001960:	469e      	mov	lr, r3
 8001962:	4770      	bx	lr

08001964 <_fini>:
 8001964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001966:	bf00      	nop
 8001968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800196a:	bc08      	pop	{r3}
 800196c:	469e      	mov	lr, r3
 800196e:	4770      	bx	lr
